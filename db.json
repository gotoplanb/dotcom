{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/keybase.txt","path":"keybase.txt","modified":0,"renderable":0},{"_id":"themes/davestanton/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f5287304130a09125fb3aee57d5b6ea59eb4df56","modified":1445717761000},{"_id":"source/keybase.txt","hash":"df6770d2be9f5ea2eb993758754ddcb97558d39f","modified":1445717761000},{"_id":"source/.DS_Store","hash":"a0fee7f4682d3784172da87e83d5d737ce9f2c5e","modified":1484780191000},{"_id":"themes/davestanton/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1476845538000},{"_id":"source/_data/menu.yml","hash":"aebf048ccd7eb9e78143992a9dd59657d19fc3f9","modified":1476841672000},{"_id":"source/_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration.md","hash":"d5d148df92536d4f347addf78a6c4071ac5f154e","modified":1484781398000},{"_id":"source/_posts/Bootstrap-the-Database.md","hash":"5f5aad89dc01e500ad42be94bf7f2c359ca00390","modified":1484779229000},{"_id":"source/_posts/Configuring-a-Delivery-Pipeline.md","hash":"0876a16b79b1db517bf39cb650d031cae7d460d3","modified":1484782880000},{"_id":"source/_posts/.DS_Store","hash":"95337a846e6c9a054a2166ab6a7baf8cfefde9e3","modified":1484782934000},{"_id":"source/_posts/Creating-the-Database.md","hash":"00bce50e1d234760e397c2b4e53c812e7d386e00","modified":1484781987000},{"_id":"source/_posts/Deploying-the-API.md","hash":"7c470aa1a1435505544eb8c0120946a0d4d9c0b7","modified":1484782722000},{"_id":"source/_posts/Generating-a-RESTful-API-with-Restify.md","hash":"ebc86ab72e571e7bcbccf12aac4ea8b6938d243b","modified":1484782371000},{"_id":"source/_posts/Getting-Started-with-PostgreSQL-on-Heroku.md","hash":"2891fc7e94c335baf95063bd804bdad81dcd5563","modified":1484781737000},{"_id":"source/_posts/Organizing-the-Project-Folder.md","hash":"92de797b4f18eef6aeaef93b23505b9518c8f69e","modified":1484783085000},{"_id":"source/_posts/Priorities-Instead-of-Resolutions.md","hash":"34a362568f61bac2ea2c17c3844c51e2c5ca01bd","modified":1484776487000},{"_id":"source/_posts/Safe-PostgreSQL-Migrations.md","hash":"5eadf8b4b5b22b7272b8c9a168857f79df1da97a","modified":1480103086000},{"_id":"source/_posts/Using-Lucidchart-for-Database-Design.md","hash":"6c0e8ecca1016df9c2d0c4a4bad06ec160666894","modified":1484781542000},{"_id":"source/_posts/init.md","hash":"dcd2b2b43d9c2d56c804ba2fb8f4de65a9b0efac","modified":1476843658000},{"_id":"themes/davestanton/layout/archive.ejs","hash":"cff994a0c2588cdb59699cea2f63e577b33fcc63","modified":1477085567000},{"_id":"themes/davestanton/layout/category.ejs","hash":"f757543bd1872148209a593fc31083244b074ac3","modified":1477085589000},{"_id":"themes/davestanton/layout/layout.ejs","hash":"786eadcca7091e6428bb1aa08002834031e92c0f","modified":1477086821000},{"_id":"themes/davestanton/layout/post.ejs","hash":"b98edad946bec5daf1943ff5ec45904eb3571a08","modified":1477086436000},{"_id":"themes/davestanton/layout/page.ejs","hash":"55bae1e226c321ace31a0f61995d65c098355fb0","modified":1477085542000},{"_id":"themes/davestanton/layout/tag.ejs","hash":"d2ed6b57b19316f925dcb21ccce4e1c4d6a47b13","modified":1477085606000},{"_id":"themes/davestanton/layout/index.ejs","hash":"556ce4819538a88a0ff9564fd8ae3cc44d4dabf4","modified":1484336096000},{"_id":"themes/davestanton/source/.DS_Store","hash":"2e53d1879c043e609a05944538a024554c5a24cd","modified":1476845543000},{"_id":"themes/davestanton/layout/partial/footer.ejs","hash":"9ec46f8a950f14d61f63d824d4366ae255e7c494","modified":1484781421000},{"_id":"themes/davestanton/layout/partial/header.ejs","hash":"9ebabbd24c4716f7bdd039b75d50433509bf7d23","modified":1477086027000},{"_id":"themes/davestanton/source/css/base.styl","hash":"711d86cbed329898bc08d7c4cc4a13acbcea0fc7","modified":1476844400000},{"_id":"public/2016/11/25/Priorities-Instead-of-Resolutions/index.html","hash":"2b15c889bc38454445d4404570c4deec4eeef5c0","modified":1484781553027},{"_id":"public/2016/10/18/init/index.html","hash":"eb0216eb757c647022d23192ce12eeddf843bff1","modified":1484781553028},{"_id":"public/2017/01/18/Organizing-the-Project-Folder/index.html","hash":"9bf75d907a955729a7a4fdc64aa1631f304b5da4","modified":1484783089454},{"_id":"public/2017/01/18/Configuring-a-Delivery-Pipeline/index.html","hash":"a4369aa91c54f75c4b4f5f90e47ec93e885ded0b","modified":1484782886167},{"_id":"public/2017/01/18/Deploying-the-API/index.html","hash":"ef690c87e8006131e7696b52bc002e7b002f057d","modified":1484782726568},{"_id":"public/2017/01/18/Bootstrap-the-Database/index.html","hash":"ac87a3f8114dba57d631b99ba85ac3aa7a112233","modified":1484779602862},{"_id":"public/2017/01/18/Creating-the-Database/index.html","hash":"4ddc68934b34966e3185ebb3ee7fcfe816e31107","modified":1484782134493},{"_id":"public/2017/01/13/Generating-a-RESTful-API-with-Restify/index.html","hash":"c4044ff90b46c33430b641dbaa0c880bcaa7bbd9","modified":1484782377199},{"_id":"public/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/index.html","hash":"8c4899361ac979610eae02f7bf4903d6d40e87fc","modified":1484781742004},{"_id":"public/2017/01/13/Using-Lucidchart-for-Database-Design/index.html","hash":"3955ebf1176af2e13d2520f57d15faaa4516a005","modified":1484781553027},{"_id":"public/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/index.html","hash":"4e470199f68cd116fcdbd3fbed7b4de7e04722fe","modified":1484781553027},{"_id":"public/archives/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553028},{"_id":"public/archives/2016/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553028},{"_id":"public/2016/10/25/Safe-PostgreSQL-Migrations/index.html","hash":"f405da31502f8e16de986bc1f6a5783ec9f3632e","modified":1484781553027},{"_id":"public/archives/2016/11/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553028},{"_id":"public/archives/2016/10/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553028},{"_id":"public/index.html","hash":"fafca4611516d5b8e53bbe642d6c5ad98b8abd76","modified":1484781553029},{"_id":"public/archives/page/2/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553028},{"_id":"public/archives/2017/01/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553029},{"_id":"public/archives/2017/index.html","hash":"bba5575cd1d18a2e84ac4fba09e5242d11b1adbd","modified":1484781553029},{"_id":"public/page/2/index.html","hash":"2969df74925124e72dc5de26182edfe7b402aa81","modified":1484781553030},{"_id":"source/_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration/video.png","hash":"8285072e5255d4d5dcec4e8675faac4a2452853d","modified":1484780163000},{"_id":"source/_posts/Using-Lucidchart-for-Database-Design/video.png","hash":"8285072e5255d4d5dcec4e8675faac4a2452853d","modified":1484780163000},{"_id":"public/2017/01/13/Using-Lucidchart-for-Database-Design/video.png","hash":"8285072e5255d4d5dcec4e8675faac4a2452853d","modified":1484780389140},{"_id":"public/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/video.png","hash":"8285072e5255d4d5dcec4e8675faac4a2452853d","modified":1484780658633},{"_id":"source/_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration/video.jpg","hash":"ec70c1579187336c038d0fde596a19d40ca13c0d","modified":1484780653000},{"_id":"source/_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484781497000},{"_id":"public/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/video.jpg","hash":"ec70c1579187336c038d0fde596a19d40ca13c0d","modified":1484780658621},{"_id":"source/_posts/Bootstrapping-the-Database.md","hash":"8b726efd042c54e83fd6a2b28af42969ab65f2f1","modified":1484782120000},{"_id":"public/2017/01/18/Bootstrapping-the-Database/index.html","hash":"1c0b119041ebc84e29535049407685d4d8a2ee65","modified":1484782134493},{"_id":"source/_posts/Using-Lucidchart-for-Database-Design/video.jpg","hash":"d2ba07e497dc716771bff23905e16fca1bd09032","modified":1484781507000},{"_id":"source/_posts/Using-Lucidchart-for-Database-Design/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484781518000},{"_id":"public/2017/01/13/Using-Lucidchart-for-Database-Design/video.jpg","hash":"d2ba07e497dc716771bff23905e16fca1bd09032","modified":1484781553035},{"_id":"source/_posts/Getting-Started-with-PostgreSQL-on-Heroku/video.jpg","hash":"e7ebb54888df4f72c10cd795822d421c000c0a8c","modified":1484781647000},{"_id":"source/_posts/Getting-Started-with-PostgreSQL-on-Heroku/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484781656000},{"_id":"public/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/video.jpg","hash":"e7ebb54888df4f72c10cd795822d421c000c0a8c","modified":1484781677879},{"_id":"source/_posts/Creating-the-Database/video.jpg","hash":"19e4879d39e88b9769486a67a970366be85d1df4","modified":1484781864000},{"_id":"source/_posts/Creating-the-Database/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484781876000},{"_id":"public/2017/01/18/Creating-the-Database/video.jpg","hash":"19e4879d39e88b9769486a67a970366be85d1df4","modified":1484781902120},{"_id":"source/_posts/Bootstrapping-the-Database/video.jpg","hash":"de84bcb5aaa54688c29b0b79dcc11b70857a5e20","modified":1484782177000},{"_id":"source/_posts/Bootstrapping-the-Database/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484782074000},{"_id":"public/2017/01/18/Bootstrapping-the-Database/video.jpg","hash":"de84bcb5aaa54688c29b0b79dcc11b70857a5e20","modified":1484782184019},{"_id":"source/_posts/Generating-a-RESTful-API-with-Restify/video.jpg","hash":"a250811e1e659054588683e79b2bf40d65a438dd","modified":1484782412000},{"_id":"source/_posts/Generating-a-RESTful-API-with-Restify/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484782421000},{"_id":"public/2017/01/13/Generating-a-RESTful-API-with-Restify/video.jpg","hash":"a250811e1e659054588683e79b2bf40d65a438dd","modified":1484782428300},{"_id":"source/_posts/Deploying-the-API/video.jpg","hash":"18aca36a3be1c4ae5504714428237299ccb51710","modified":1484782469000},{"_id":"source/_posts/Deploying-the-API/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484782480000},{"_id":"public/2017/01/18/Deploying-the-API/video.jpg","hash":"18aca36a3be1c4ae5504714428237299ccb51710","modified":1484782616299},{"_id":"source/_posts/Configuring-a-Delivery-Pipeline/video.jpg","hash":"49956b4073a690a5e0379068eab462b2a36f0ca3","modified":1484782805000},{"_id":"source/_posts/Configuring-a-Delivery-Pipeline/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484782813000},{"_id":"public/2017/01/18/Configuring-a-Delivery-Pipeline/video.jpg","hash":"49956b4073a690a5e0379068eab462b2a36f0ca3","modified":1484782886168},{"_id":"source/_posts/Organizing-the-Project-Folder/video.jpg","hash":"4fc8be01c61714734b63f4bf449b1068a8b98a78","modified":1484782938000},{"_id":"source/_posts/Organizing-the-Project-Folder/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484782947000},{"_id":"public/2017/01/18/Organizing-the-Project-Folder/video.jpg","hash":"4fc8be01c61714734b63f4bf449b1068a8b98a78","modified":1484783089455}],"Category":[],"Data":[{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[],"Post":[{"title":"A Walking Skeleton for Prototyping and Elaboration","date":"2017-01-13T20:00:00.000Z","_content":"\n## tl;dr\n\nIn this series, I will show you how I like to setup new software projects as early as possible to help me validate architecture and ensure the developers can start the most valuable features during the first development sprint.\n\n## Articles in this Series\n\n1. [A Walking Skeleton for Prototyping and Elaboration](/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/)\n2. [Using Lucidchart for Database Design](/2017/01/13/Using-Lucidchart-for-Database-Design/)\n3. [Getting Started with PostgreSQL on Heroku](/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/)\n4. [Creating the Database](/2017/01/18/Creating-the-Database/)\n5. [Bootstrapping the Database](/2017/01/18/Bootstrapping-the-Database/)\n6. [Generating a RESTful API with Restify](/2017/01/13/Generating-a-RESTful-API-with-Restify/)\n7. [Deploying the API](/2017/01/18/Deploying-the-API/)\n8. [Configuring a Delivery pipeline](/2017/01/18/Configuring-a-Delivery-Pipeline/)\n9. [Organizing Your Project Folder](/2017/01/18/Organizing-the-Project-Folder/)\n10. Documenting Your API\n11. Testing Your Walking Skeleton\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6elVWUnNNNk5oX28/view)\n\n## Introduction\n\nWe all want to build reliable software that users love. How we do this varies widely depending on location of the team and discovery processes.\n\nThis article will make a case for using a *walking skeleton* approach to quickly [validate your project idea and understand the risks](http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/).\n\n## What is a walking skeleton?\n\nA walking skeleton [\"is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.\"](http://alistair.cockburn.us/Walking+skeleton)\n\nThe week before the first development iteration is a frantic combination of validating user stories and configuring all of the tooling for the team. We all create templates or scaffolding of some sort to make this common configuration less painful, but we're all have the same risky assumption: The project as architected and designed can be built on time, within budget, and with low [technical debt](https://en.wikipedia.org/wiki/Technical_debt).\n\n## Why should I build a walking skeleton?\n\nIn my experience, the single greatest indicator of project success is seeing complex, valuable work scheduled for the first development iteration. If the first iteration is full of UI-related tickets, I'm immediately suspicious that we don't understand our system complexity yet, so we're kicking the risk can down the road. Trouble lies ahead.\n\nMature design methodologies share a key tenant: Understand risk as soon as possible. User Experience design relies on interviews and persona generation to help ensure we build something that actually solves a problem. In software architecture, we build prototypes to understand both the complexity of individual components as well as the integrations between components in the larger system.\n\n[Scrum](https://www.scrumalliance.org/why-scrum) refers to a *spike* as a task to understand the complexity of a single technical implementation. [The Pragmatic Programmer](https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X) uses the term *tracer bullet* to similarly describe a strategy for de-risking a specific technical implementation. This singular focus makes sense for collocated teams that can quickly work around infrastructure and build problems.\n\nWith distributed teams, and especially when dealing with distant timezones, the biggest time-sucks on a project happen not within a component but at the integration points between components. Two frequent examples are 1) deploying services so that the frontend team can build views, and 2) delivering testable builds to the quality assurance team.\n\nCreating a walking skeleton will allow your developers and testers to focus on the most valuable and most risky features early in the project to allow for [course correction](http://www.qrg.northwestern.edu/projects/vss/docs/navigation/1-what-is-course-correction.html) as soon (and inexpensively) as possible.\n\n## But we are still designing! This seems like it will take a lot of time.\n\nThe idea with a walking skeleton is to have a minimal set of integration between the components of the system. The walking skeleton does not represent the final architecture but instead allows each component to evolve with minimal rework of the interfaces between components.\n\nAll teams, regardless of size, standardize on tooling and frameworks. Although we don't want to fall into the [golden hammer](https://en.wikipedia.org/wiki/Law_of_the_instrument) anti-pattern, we know that we have expertise in certain tools and frameworks. We sell our projects factoring this experience, so we also should begin design with these tools in mind.\n\nDo we like to use type-safe languages or dynamic languages? Relational databases or document stores? Monolithic or micro services? Offline-first or online-first?\n\nIt is doubtful that your user-experience design team will be familiar enough with these different paradigms to design within the constraints of tools most likely to be used. While we don't want to prematurely constrain the inception (aka discovery) phase of a project, the elaboration (aka prototyping) phase of a project is primarily focused on understanding the complexities of multiple solutions.\n\n[Elaboration](https://en.wikipedia.org/wiki/Unified_Process#Elaboration_phase) allows us to better align our design to business values. The time we spent on a feature should be highly correlated with the value of that feature.\n\nIt is not enough to just review design artifacts. As an architect, we need to play with the various components and try to uncover unexpected complexity. Does [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) make sense for this experience or are we going to run into performance problems with nested loops? Do we actually care about data relationships, or are we most worried about writing a firehose of messages to disk?\n\nThere is no single best way to build. Everything is an optimization between cost, security, performance, durability, and maintainability. Generating a walking skeleton during the elaboration phase of a project both helps me think though the overall solution optimization. Instead of words, I an use a walking skeleton to demonstrate risks early. Uncovering risks early allows course correction before our stakeholders have their hearts set on an expected outcome that we are never going to be able to deliver.\n\n## Okay, I'm convinced! How do I get started with walking skeleton?\n\nThroughout the rest of this article series, I will show you how you can create a walking skeleton that will help you quickly prototype most any type of software project. I will try to strike a balance between generalizing this workflow too broadly or focusing on tightly coupled tools. Each article should be adaptable to many different tools, platforms, and frameworks.\n\n## Next post in this series\n\n[Using Lucidchart for Database Design](/2017/01/13/Using-Lucidchart-for-Database-Design/)\n","source":"_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration.md","raw":"---\ntitle: A Walking Skeleton for Prototyping and Elaboration\ndate: 2017-01-13 15:00:00\ntags:\n---\n\n## tl;dr\n\nIn this series, I will show you how I like to setup new software projects as early as possible to help me validate architecture and ensure the developers can start the most valuable features during the first development sprint.\n\n## Articles in this Series\n\n1. [A Walking Skeleton for Prototyping and Elaboration](/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/)\n2. [Using Lucidchart for Database Design](/2017/01/13/Using-Lucidchart-for-Database-Design/)\n3. [Getting Started with PostgreSQL on Heroku](/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/)\n4. [Creating the Database](/2017/01/18/Creating-the-Database/)\n5. [Bootstrapping the Database](/2017/01/18/Bootstrapping-the-Database/)\n6. [Generating a RESTful API with Restify](/2017/01/13/Generating-a-RESTful-API-with-Restify/)\n7. [Deploying the API](/2017/01/18/Deploying-the-API/)\n8. [Configuring a Delivery pipeline](/2017/01/18/Configuring-a-Delivery-Pipeline/)\n9. [Organizing Your Project Folder](/2017/01/18/Organizing-the-Project-Folder/)\n10. Documenting Your API\n11. Testing Your Walking Skeleton\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6elVWUnNNNk5oX28/view)\n\n## Introduction\n\nWe all want to build reliable software that users love. How we do this varies widely depending on location of the team and discovery processes.\n\nThis article will make a case for using a *walking skeleton* approach to quickly [validate your project idea and understand the risks](http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/).\n\n## What is a walking skeleton?\n\nA walking skeleton [\"is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.\"](http://alistair.cockburn.us/Walking+skeleton)\n\nThe week before the first development iteration is a frantic combination of validating user stories and configuring all of the tooling for the team. We all create templates or scaffolding of some sort to make this common configuration less painful, but we're all have the same risky assumption: The project as architected and designed can be built on time, within budget, and with low [technical debt](https://en.wikipedia.org/wiki/Technical_debt).\n\n## Why should I build a walking skeleton?\n\nIn my experience, the single greatest indicator of project success is seeing complex, valuable work scheduled for the first development iteration. If the first iteration is full of UI-related tickets, I'm immediately suspicious that we don't understand our system complexity yet, so we're kicking the risk can down the road. Trouble lies ahead.\n\nMature design methodologies share a key tenant: Understand risk as soon as possible. User Experience design relies on interviews and persona generation to help ensure we build something that actually solves a problem. In software architecture, we build prototypes to understand both the complexity of individual components as well as the integrations between components in the larger system.\n\n[Scrum](https://www.scrumalliance.org/why-scrum) refers to a *spike* as a task to understand the complexity of a single technical implementation. [The Pragmatic Programmer](https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X) uses the term *tracer bullet* to similarly describe a strategy for de-risking a specific technical implementation. This singular focus makes sense for collocated teams that can quickly work around infrastructure and build problems.\n\nWith distributed teams, and especially when dealing with distant timezones, the biggest time-sucks on a project happen not within a component but at the integration points between components. Two frequent examples are 1) deploying services so that the frontend team can build views, and 2) delivering testable builds to the quality assurance team.\n\nCreating a walking skeleton will allow your developers and testers to focus on the most valuable and most risky features early in the project to allow for [course correction](http://www.qrg.northwestern.edu/projects/vss/docs/navigation/1-what-is-course-correction.html) as soon (and inexpensively) as possible.\n\n## But we are still designing! This seems like it will take a lot of time.\n\nThe idea with a walking skeleton is to have a minimal set of integration between the components of the system. The walking skeleton does not represent the final architecture but instead allows each component to evolve with minimal rework of the interfaces between components.\n\nAll teams, regardless of size, standardize on tooling and frameworks. Although we don't want to fall into the [golden hammer](https://en.wikipedia.org/wiki/Law_of_the_instrument) anti-pattern, we know that we have expertise in certain tools and frameworks. We sell our projects factoring this experience, so we also should begin design with these tools in mind.\n\nDo we like to use type-safe languages or dynamic languages? Relational databases or document stores? Monolithic or micro services? Offline-first or online-first?\n\nIt is doubtful that your user-experience design team will be familiar enough with these different paradigms to design within the constraints of tools most likely to be used. While we don't want to prematurely constrain the inception (aka discovery) phase of a project, the elaboration (aka prototyping) phase of a project is primarily focused on understanding the complexities of multiple solutions.\n\n[Elaboration](https://en.wikipedia.org/wiki/Unified_Process#Elaboration_phase) allows us to better align our design to business values. The time we spent on a feature should be highly correlated with the value of that feature.\n\nIt is not enough to just review design artifacts. As an architect, we need to play with the various components and try to uncover unexpected complexity. Does [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) make sense for this experience or are we going to run into performance problems with nested loops? Do we actually care about data relationships, or are we most worried about writing a firehose of messages to disk?\n\nThere is no single best way to build. Everything is an optimization between cost, security, performance, durability, and maintainability. Generating a walking skeleton during the elaboration phase of a project both helps me think though the overall solution optimization. Instead of words, I an use a walking skeleton to demonstrate risks early. Uncovering risks early allows course correction before our stakeholders have their hearts set on an expected outcome that we are never going to be able to deliver.\n\n## Okay, I'm convinced! How do I get started with walking skeleton?\n\nThroughout the rest of this article series, I will show you how you can create a walking skeleton that will help you quickly prototype most any type of software project. I will try to strike a balance between generalizing this workflow too broadly or focusing on tightly coupled tools. Each article should be adaptable to many different tools, platforms, and frameworks.\n\n## Next post in this series\n\n[Using Lucidchart for Database Design](/2017/01/13/Using-Lucidchart-for-Database-Design/)\n","slug":"A-Walking-Skeleton-for-Prototyping-and-Elaboration","published":1,"updated":"2017-01-18T23:16:38.000Z","_id":"ciy3jfq5000000zrr2ko0etsm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>In this series, I will show you how I like to setup new software projects as early as possible to help me validate architecture and ensure the developers can start the most valuable features during the first development sprint.</p>\n<h2 id=\"Articles-in-this-Series\"><a href=\"#Articles-in-this-Series\" class=\"headerlink\" title=\"Articles in this Series\"></a>Articles in this Series</h2><ol>\n<li><a href=\"/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/\">A Walking Skeleton for Prototyping and Elaboration</a></li>\n<li><a href=\"/2017/01/13/Using-Lucidchart-for-Database-Design/\">Using Lucidchart for Database Design</a></li>\n<li><a href=\"/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/\">Getting Started with PostgreSQL on Heroku</a></li>\n<li><a href=\"/2017/01/18/Creating-the-Database/\">Creating the Database</a></li>\n<li><a href=\"/2017/01/18/Bootstrapping-the-Database/\">Bootstrapping the Database</a></li>\n<li><a href=\"/2017/01/13/Generating-a-RESTful-API-with-Restify/\">Generating a RESTful API with Restify</a></li>\n<li><a href=\"/2017/01/18/Deploying-the-API/\">Deploying the API</a></li>\n<li><a href=\"/2017/01/18/Configuring-a-Delivery-Pipeline/\">Configuring a Delivery pipeline</a></li>\n<li><a href=\"/2017/01/18/Organizing-the-Project-Folder/\">Organizing Your Project Folder</a></li>\n<li>Documenting Your API</li>\n<li>Testing Your Walking Skeleton</li>\n</ol>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6elVWUnNNNk5oX28/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>We all want to build reliable software that users love. How we do this varies widely depending on location of the team and discovery processes.</p>\n<p>This article will make a case for using a <em>walking skeleton</em> approach to quickly <a href=\"http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/\" target=\"_blank\" rel=\"external\">validate your project idea and understand the risks</a>.</p>\n<h2 id=\"What-is-a-walking-skeleton\"><a href=\"#What-is-a-walking-skeleton\" class=\"headerlink\" title=\"What is a walking skeleton?\"></a>What is a walking skeleton?</h2><p>A walking skeleton <a href=\"http://alistair.cockburn.us/Walking+skeleton\" target=\"_blank\" rel=\"external\">“is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.”</a></p>\n<p>The week before the first development iteration is a frantic combination of validating user stories and configuring all of the tooling for the team. We all create templates or scaffolding of some sort to make this common configuration less painful, but we’re all have the same risky assumption: The project as architected and designed can be built on time, within budget, and with low <a href=\"https://en.wikipedia.org/wiki/Technical_debt\" target=\"_blank\" rel=\"external\">technical debt</a>.</p>\n<h2 id=\"Why-should-I-build-a-walking-skeleton\"><a href=\"#Why-should-I-build-a-walking-skeleton\" class=\"headerlink\" title=\"Why should I build a walking skeleton?\"></a>Why should I build a walking skeleton?</h2><p>In my experience, the single greatest indicator of project success is seeing complex, valuable work scheduled for the first development iteration. If the first iteration is full of UI-related tickets, I’m immediately suspicious that we don’t understand our system complexity yet, so we’re kicking the risk can down the road. Trouble lies ahead.</p>\n<p>Mature design methodologies share a key tenant: Understand risk as soon as possible. User Experience design relies on interviews and persona generation to help ensure we build something that actually solves a problem. In software architecture, we build prototypes to understand both the complexity of individual components as well as the integrations between components in the larger system.</p>\n<p><a href=\"https://www.scrumalliance.org/why-scrum\" target=\"_blank\" rel=\"external\">Scrum</a> refers to a <em>spike</em> as a task to understand the complexity of a single technical implementation. <a href=\"https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X\" target=\"_blank\" rel=\"external\">The Pragmatic Programmer</a> uses the term <em>tracer bullet</em> to similarly describe a strategy for de-risking a specific technical implementation. This singular focus makes sense for collocated teams that can quickly work around infrastructure and build problems.</p>\n<p>With distributed teams, and especially when dealing with distant timezones, the biggest time-sucks on a project happen not within a component but at the integration points between components. Two frequent examples are 1) deploying services so that the frontend team can build views, and 2) delivering testable builds to the quality assurance team.</p>\n<p>Creating a walking skeleton will allow your developers and testers to focus on the most valuable and most risky features early in the project to allow for <a href=\"http://www.qrg.northwestern.edu/projects/vss/docs/navigation/1-what-is-course-correction.html\" target=\"_blank\" rel=\"external\">course correction</a> as soon (and inexpensively) as possible.</p>\n<h2 id=\"But-we-are-still-designing-This-seems-like-it-will-take-a-lot-of-time\"><a href=\"#But-we-are-still-designing-This-seems-like-it-will-take-a-lot-of-time\" class=\"headerlink\" title=\"But we are still designing! This seems like it will take a lot of time.\"></a>But we are still designing! This seems like it will take a lot of time.</h2><p>The idea with a walking skeleton is to have a minimal set of integration between the components of the system. The walking skeleton does not represent the final architecture but instead allows each component to evolve with minimal rework of the interfaces between components.</p>\n<p>All teams, regardless of size, standardize on tooling and frameworks. Although we don’t want to fall into the <a href=\"https://en.wikipedia.org/wiki/Law_of_the_instrument\" target=\"_blank\" rel=\"external\">golden hammer</a> anti-pattern, we know that we have expertise in certain tools and frameworks. We sell our projects factoring this experience, so we also should begin design with these tools in mind.</p>\n<p>Do we like to use type-safe languages or dynamic languages? Relational databases or document stores? Monolithic or micro services? Offline-first or online-first?</p>\n<p>It is doubtful that your user-experience design team will be familiar enough with these different paradigms to design within the constraints of tools most likely to be used. While we don’t want to prematurely constrain the inception (aka discovery) phase of a project, the elaboration (aka prototyping) phase of a project is primarily focused on understanding the complexities of multiple solutions.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Unified_Process#Elaboration_phase\" target=\"_blank\" rel=\"external\">Elaboration</a> allows us to better align our design to business values. The time we spent on a feature should be highly correlated with the value of that feature.</p>\n<p>It is not enough to just review design artifacts. As an architect, we need to play with the various components and try to uncover unexpected complexity. Does <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"external\">REST</a> make sense for this experience or are we going to run into performance problems with nested loops? Do we actually care about data relationships, or are we most worried about writing a firehose of messages to disk?</p>\n<p>There is no single best way to build. Everything is an optimization between cost, security, performance, durability, and maintainability. Generating a walking skeleton during the elaboration phase of a project both helps me think though the overall solution optimization. Instead of words, I an use a walking skeleton to demonstrate risks early. Uncovering risks early allows course correction before our stakeholders have their hearts set on an expected outcome that we are never going to be able to deliver.</p>\n<h2 id=\"Okay-I’m-convinced-How-do-I-get-started-with-walking-skeleton\"><a href=\"#Okay-I’m-convinced-How-do-I-get-started-with-walking-skeleton\" class=\"headerlink\" title=\"Okay, I’m convinced! How do I get started with walking skeleton?\"></a>Okay, I’m convinced! How do I get started with walking skeleton?</h2><p>Throughout the rest of this article series, I will show you how you can create a walking skeleton that will help you quickly prototype most any type of software project. I will try to strike a balance between generalizing this workflow too broadly or focusing on tightly coupled tools. Each article should be adaptable to many different tools, platforms, and frameworks.</p>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Using-Lucidchart-for-Database-Design/\">Using Lucidchart for Database Design</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>In this series, I will show you how I like to setup new software projects as early as possible to help me validate architecture and ensure the developers can start the most valuable features during the first development sprint.</p>\n<h2 id=\"Articles-in-this-Series\"><a href=\"#Articles-in-this-Series\" class=\"headerlink\" title=\"Articles in this Series\"></a>Articles in this Series</h2><ol>\n<li><a href=\"/2017/01/13/A-Walking-Skeleton-for-Prototyping-and-Elaboration/\">A Walking Skeleton for Prototyping and Elaboration</a></li>\n<li><a href=\"/2017/01/13/Using-Lucidchart-for-Database-Design/\">Using Lucidchart for Database Design</a></li>\n<li><a href=\"/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/\">Getting Started with PostgreSQL on Heroku</a></li>\n<li><a href=\"/2017/01/18/Creating-the-Database/\">Creating the Database</a></li>\n<li><a href=\"/2017/01/18/Bootstrapping-the-Database/\">Bootstrapping the Database</a></li>\n<li><a href=\"/2017/01/13/Generating-a-RESTful-API-with-Restify/\">Generating a RESTful API with Restify</a></li>\n<li><a href=\"/2017/01/18/Deploying-the-API/\">Deploying the API</a></li>\n<li><a href=\"/2017/01/18/Configuring-a-Delivery-Pipeline/\">Configuring a Delivery pipeline</a></li>\n<li><a href=\"/2017/01/18/Organizing-the-Project-Folder/\">Organizing Your Project Folder</a></li>\n<li>Documenting Your API</li>\n<li>Testing Your Walking Skeleton</li>\n</ol>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6elVWUnNNNk5oX28/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>We all want to build reliable software that users love. How we do this varies widely depending on location of the team and discovery processes.</p>\n<p>This article will make a case for using a <em>walking skeleton</em> approach to quickly <a href=\"http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/\">validate your project idea and understand the risks</a>.</p>\n<h2 id=\"What-is-a-walking-skeleton\"><a href=\"#What-is-a-walking-skeleton\" class=\"headerlink\" title=\"What is a walking skeleton?\"></a>What is a walking skeleton?</h2><p>A walking skeleton <a href=\"http://alistair.cockburn.us/Walking+skeleton\">“is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.”</a></p>\n<p>The week before the first development iteration is a frantic combination of validating user stories and configuring all of the tooling for the team. We all create templates or scaffolding of some sort to make this common configuration less painful, but we’re all have the same risky assumption: The project as architected and designed can be built on time, within budget, and with low <a href=\"https://en.wikipedia.org/wiki/Technical_debt\">technical debt</a>.</p>\n<h2 id=\"Why-should-I-build-a-walking-skeleton\"><a href=\"#Why-should-I-build-a-walking-skeleton\" class=\"headerlink\" title=\"Why should I build a walking skeleton?\"></a>Why should I build a walking skeleton?</h2><p>In my experience, the single greatest indicator of project success is seeing complex, valuable work scheduled for the first development iteration. If the first iteration is full of UI-related tickets, I’m immediately suspicious that we don’t understand our system complexity yet, so we’re kicking the risk can down the road. Trouble lies ahead.</p>\n<p>Mature design methodologies share a key tenant: Understand risk as soon as possible. User Experience design relies on interviews and persona generation to help ensure we build something that actually solves a problem. In software architecture, we build prototypes to understand both the complexity of individual components as well as the integrations between components in the larger system.</p>\n<p><a href=\"https://www.scrumalliance.org/why-scrum\">Scrum</a> refers to a <em>spike</em> as a task to understand the complexity of a single technical implementation. <a href=\"https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X\">The Pragmatic Programmer</a> uses the term <em>tracer bullet</em> to similarly describe a strategy for de-risking a specific technical implementation. This singular focus makes sense for collocated teams that can quickly work around infrastructure and build problems.</p>\n<p>With distributed teams, and especially when dealing with distant timezones, the biggest time-sucks on a project happen not within a component but at the integration points between components. Two frequent examples are 1) deploying services so that the frontend team can build views, and 2) delivering testable builds to the quality assurance team.</p>\n<p>Creating a walking skeleton will allow your developers and testers to focus on the most valuable and most risky features early in the project to allow for <a href=\"http://www.qrg.northwestern.edu/projects/vss/docs/navigation/1-what-is-course-correction.html\">course correction</a> as soon (and inexpensively) as possible.</p>\n<h2 id=\"But-we-are-still-designing-This-seems-like-it-will-take-a-lot-of-time\"><a href=\"#But-we-are-still-designing-This-seems-like-it-will-take-a-lot-of-time\" class=\"headerlink\" title=\"But we are still designing! This seems like it will take a lot of time.\"></a>But we are still designing! This seems like it will take a lot of time.</h2><p>The idea with a walking skeleton is to have a minimal set of integration between the components of the system. The walking skeleton does not represent the final architecture but instead allows each component to evolve with minimal rework of the interfaces between components.</p>\n<p>All teams, regardless of size, standardize on tooling and frameworks. Although we don’t want to fall into the <a href=\"https://en.wikipedia.org/wiki/Law_of_the_instrument\">golden hammer</a> anti-pattern, we know that we have expertise in certain tools and frameworks. We sell our projects factoring this experience, so we also should begin design with these tools in mind.</p>\n<p>Do we like to use type-safe languages or dynamic languages? Relational databases or document stores? Monolithic or micro services? Offline-first or online-first?</p>\n<p>It is doubtful that your user-experience design team will be familiar enough with these different paradigms to design within the constraints of tools most likely to be used. While we don’t want to prematurely constrain the inception (aka discovery) phase of a project, the elaboration (aka prototyping) phase of a project is primarily focused on understanding the complexities of multiple solutions.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Unified_Process#Elaboration_phase\">Elaboration</a> allows us to better align our design to business values. The time we spent on a feature should be highly correlated with the value of that feature.</p>\n<p>It is not enough to just review design artifacts. As an architect, we need to play with the various components and try to uncover unexpected complexity. Does <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a> make sense for this experience or are we going to run into performance problems with nested loops? Do we actually care about data relationships, or are we most worried about writing a firehose of messages to disk?</p>\n<p>There is no single best way to build. Everything is an optimization between cost, security, performance, durability, and maintainability. Generating a walking skeleton during the elaboration phase of a project both helps me think though the overall solution optimization. Instead of words, I an use a walking skeleton to demonstrate risks early. Uncovering risks early allows course correction before our stakeholders have their hearts set on an expected outcome that we are never going to be able to deliver.</p>\n<h2 id=\"Okay-I’m-convinced-How-do-I-get-started-with-walking-skeleton\"><a href=\"#Okay-I’m-convinced-How-do-I-get-started-with-walking-skeleton\" class=\"headerlink\" title=\"Okay, I’m convinced! How do I get started with walking skeleton?\"></a>Okay, I’m convinced! How do I get started with walking skeleton?</h2><p>Throughout the rest of this article series, I will show you how you can create a walking skeleton that will help you quickly prototype most any type of software project. I will try to strike a balance between generalizing this workflow too broadly or focusing on tightly coupled tools. Each article should be adaptable to many different tools, platforms, and frameworks.</p>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Using-Lucidchart-for-Database-Design/\">Using Lucidchart for Database Design</a></p>\n"},{"title":"Configuring a Delivery Pipeline","date":"2017-01-18T22:00:32.000Z","_content":"\n## tl;dr\n\nHeroku Pipelines allow you to setup a continuous delivery pipeline with multiple stages.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6eml0Qml4eXVkSFU/view)\n\n## Transcript\n\n1. git-flow refresher\n    1. Create develop from master\n    2. Change default branch to develop\n    3. Protect master will all checkboxes except for merge review for admins\n2. Heroku pipeline for development stage\n    1. Navigate to pipeline\n    2. Create app named davedemo-cardset-develop\n    3. Add to pipeline\n    4. Move to development stage\n    5. Click into app overview\n    6. Add PostgreSQL and Papertrail\n    7. Connect to database and bootstrap database then add another card for testing\n    8. Click to deployment page\n    9. Enable automatic deployment for develop\n    10. Manually deploy from develop\n    11. Click to view the app to be sure it's running.\n    12. Try /api/generic/card and see data\n    13. Heroku review apps are cool but we will do another time b/c credentials and cost\n    14. Create feature branch\n    15. Add `.github/PULL_REQUEST_TEMPLATE.md` to feature then PR to  develop\n    16. Rebase, merge, delete\n    17. PR from develop to master with squash v0.0.1 and describe semver and changelog message\n    18. Verify deployment in browser and in Heroku overview\n3. Heroku pipeline for staging stag\n    1. Repeat steps like setting up development stage\n    2. Enable automatic deployments from master\n    3. Go into production app and remove automatic deployment\n\n## Next post in this series\n\n[Organizing Your Project Folder](/2017/01/18/Organizing-the-Project-Folder/)\n","source":"_posts/Configuring-a-Delivery-Pipeline.md","raw":"---\ntitle: Configuring a Delivery Pipeline\ndate: 2017-01-18 17:00:32\ntags:\n---\n\n## tl;dr\n\nHeroku Pipelines allow you to setup a continuous delivery pipeline with multiple stages.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6eml0Qml4eXVkSFU/view)\n\n## Transcript\n\n1. git-flow refresher\n    1. Create develop from master\n    2. Change default branch to develop\n    3. Protect master will all checkboxes except for merge review for admins\n2. Heroku pipeline for development stage\n    1. Navigate to pipeline\n    2. Create app named davedemo-cardset-develop\n    3. Add to pipeline\n    4. Move to development stage\n    5. Click into app overview\n    6. Add PostgreSQL and Papertrail\n    7. Connect to database and bootstrap database then add another card for testing\n    8. Click to deployment page\n    9. Enable automatic deployment for develop\n    10. Manually deploy from develop\n    11. Click to view the app to be sure it's running.\n    12. Try /api/generic/card and see data\n    13. Heroku review apps are cool but we will do another time b/c credentials and cost\n    14. Create feature branch\n    15. Add `.github/PULL_REQUEST_TEMPLATE.md` to feature then PR to  develop\n    16. Rebase, merge, delete\n    17. PR from develop to master with squash v0.0.1 and describe semver and changelog message\n    18. Verify deployment in browser and in Heroku overview\n3. Heroku pipeline for staging stag\n    1. Repeat steps like setting up development stage\n    2. Enable automatic deployments from master\n    3. Go into production app and remove automatic deployment\n\n## Next post in this series\n\n[Organizing Your Project Folder](/2017/01/18/Organizing-the-Project-Folder/)\n","slug":"Configuring-a-Delivery-Pipeline","published":1,"updated":"2017-01-18T23:41:20.000Z","_id":"ciy3jfq5b00020zrr2atxfgkc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku Pipelines allow you to setup a continuous delivery pipeline with multiple stages.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6eml0Qml4eXVkSFU/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>git-flow refresher<ol>\n<li>Create develop from master</li>\n<li>Change default branch to develop</li>\n<li>Protect master will all checkboxes except for merge review for admins</li>\n</ol>\n</li>\n<li>Heroku pipeline for development stage<ol>\n<li>Navigate to pipeline</li>\n<li>Create app named davedemo-cardset-develop</li>\n<li>Add to pipeline</li>\n<li>Move to development stage</li>\n<li>Click into app overview</li>\n<li>Add PostgreSQL and Papertrail</li>\n<li>Connect to database and bootstrap database then add another card for testing</li>\n<li>Click to deployment page</li>\n<li>Enable automatic deployment for develop</li>\n<li>Manually deploy from develop</li>\n<li>Click to view the app to be sure it’s running.</li>\n<li>Try /api/generic/card and see data</li>\n<li>Heroku review apps are cool but we will do another time b/c credentials and cost</li>\n<li>Create feature branch</li>\n<li>Add <code>.github/PULL_REQUEST_TEMPLATE.md</code> to feature then PR to  develop</li>\n<li>Rebase, merge, delete</li>\n<li>PR from develop to master with squash v0.0.1 and describe semver and changelog message</li>\n<li>Verify deployment in browser and in Heroku overview</li>\n</ol>\n</li>\n<li>Heroku pipeline for staging stag<ol>\n<li>Repeat steps like setting up development stage</li>\n<li>Enable automatic deployments from master</li>\n<li>Go into production app and remove automatic deployment</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Organizing-the-Project-Folder/\">Organizing Your Project Folder</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku Pipelines allow you to setup a continuous delivery pipeline with multiple stages.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6eml0Qml4eXVkSFU/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>git-flow refresher<ol>\n<li>Create develop from master</li>\n<li>Change default branch to develop</li>\n<li>Protect master will all checkboxes except for merge review for admins</li>\n</ol>\n</li>\n<li>Heroku pipeline for development stage<ol>\n<li>Navigate to pipeline</li>\n<li>Create app named davedemo-cardset-develop</li>\n<li>Add to pipeline</li>\n<li>Move to development stage</li>\n<li>Click into app overview</li>\n<li>Add PostgreSQL and Papertrail</li>\n<li>Connect to database and bootstrap database then add another card for testing</li>\n<li>Click to deployment page</li>\n<li>Enable automatic deployment for develop</li>\n<li>Manually deploy from develop</li>\n<li>Click to view the app to be sure it’s running.</li>\n<li>Try /api/generic/card and see data</li>\n<li>Heroku review apps are cool but we will do another time b/c credentials and cost</li>\n<li>Create feature branch</li>\n<li>Add <code>.github/PULL_REQUEST_TEMPLATE.md</code> to feature then PR to  develop</li>\n<li>Rebase, merge, delete</li>\n<li>PR from develop to master with squash v0.0.1 and describe semver and changelog message</li>\n<li>Verify deployment in browser and in Heroku overview</li>\n</ol>\n</li>\n<li>Heroku pipeline for staging stag<ol>\n<li>Repeat steps like setting up development stage</li>\n<li>Enable automatic deployments from master</li>\n<li>Go into production app and remove automatic deployment</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Organizing-the-Project-Folder/\">Organizing Your Project Folder</a></p>\n"},{"title":"Creating the Database","date":"2017-01-18T21:59:45.000Z","_content":"\n## tl;dr\n\nWe will execute our SQL script to create tables, and then we will manually add records.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6WVF0eDdod0x6S3M/view)\n\n## Transcript\n\n1. Execute SQL to create tables\n    1. Copy/paste 1-create-tables-sql\n    2. Execute the script\n    3. See tables\n2. Add some example data\n    1. Create a card\n    2. Create a card-set\n    3. Create a card-set-card\n3. Export SQL as create statements\n    1. Get card-set-card and save into 2-insert-records.sql\n    2. Repeat for card-set\n    3. Repeat for card\n    4. Save\n\n## Next post in this series\n\n[Bootstrapping the Database](/2017/01/18/Bootstrapping-the-Database/)\n","source":"_posts/Creating-the-Database.md","raw":"---\ntitle: Creating the Database\ndate: 2017-01-18 16:59:45\ntags:\n---\n\n## tl;dr\n\nWe will execute our SQL script to create tables, and then we will manually add records.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6WVF0eDdod0x6S3M/view)\n\n## Transcript\n\n1. Execute SQL to create tables\n    1. Copy/paste 1-create-tables-sql\n    2. Execute the script\n    3. See tables\n2. Add some example data\n    1. Create a card\n    2. Create a card-set\n    3. Create a card-set-card\n3. Export SQL as create statements\n    1. Get card-set-card and save into 2-insert-records.sql\n    2. Repeat for card-set\n    3. Repeat for card\n    4. Save\n\n## Next post in this series\n\n[Bootstrapping the Database](/2017/01/18/Bootstrapping-the-Database/)\n","slug":"Creating-the-Database","published":1,"updated":"2017-01-18T23:26:27.000Z","_id":"ciy3jfq5c00030zrrtbtheoy1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>We will execute our SQL script to create tables, and then we will manually add records.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6WVF0eDdod0x6S3M/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Execute SQL to create tables<ol>\n<li>Copy/paste 1-create-tables-sql</li>\n<li>Execute the script</li>\n<li>See tables</li>\n</ol>\n</li>\n<li>Add some example data<ol>\n<li>Create a card</li>\n<li>Create a card-set</li>\n<li>Create a card-set-card</li>\n</ol>\n</li>\n<li>Export SQL as create statements<ol>\n<li>Get card-set-card and save into 2-insert-records.sql</li>\n<li>Repeat for card-set</li>\n<li>Repeat for card</li>\n<li>Save</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Bootstrapping-the-Database/\">Bootstrapping the Database</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>We will execute our SQL script to create tables, and then we will manually add records.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6WVF0eDdod0x6S3M/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Execute SQL to create tables<ol>\n<li>Copy/paste 1-create-tables-sql</li>\n<li>Execute the script</li>\n<li>See tables</li>\n</ol>\n</li>\n<li>Add some example data<ol>\n<li>Create a card</li>\n<li>Create a card-set</li>\n<li>Create a card-set-card</li>\n</ol>\n</li>\n<li>Export SQL as create statements<ol>\n<li>Get card-set-card and save into 2-insert-records.sql</li>\n<li>Repeat for card-set</li>\n<li>Repeat for card</li>\n<li>Save</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Bootstrapping-the-Database/\">Bootstrapping the Database</a></p>\n"},{"title":"Deploying the API","date":"2017-01-18T22:00:20.000Z","_content":"\n## tl;dr\n\nHeroku provides easy code deployments.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6TWhuTV85NHJTdGM/view)\n\n## Transcript\n\n1. New Pipeline\n    1. Same name as your app\n    2. connect to github\n    3. search for your repo and connect\n    4. Click into production stage\n    5. Click deploy tab\n    6. Enable automatic deployments from master\n2. First attempt to deploy to production stage\n    1. git status and confirm .env is not listed\n    2. git add, commit, push\n    3. `heroku ps` OR `heroku ps:scale web=1`\n    4. Wait for deployment success, try to curl, and be sad. What happened?\n3. Add Papertrail to troublshoot\n    1. `heroku addons:create papertrail:choklad`\n    2. Create  Procfile with contents  web: node index.js since we likely will need in the future\n    3. Git add, commit, push\n    4. Wait for deployment again, and see it still doesn't work.\n    5. Look at Resources > Papertrail and note problem binding do port\n4. Update index.js to bind to port 5000\n    1. var port = process.env.PORT || 8080;\n    2. console.log(`REST server listening on ${port}`);\n    3. server.listen(port);`\n    4. Confirm heroku local still works and you see port 5000 message\n    5. Git add, commit, push\n    6. GET /api/generic/card to confirm it worked\n    7. Look in Papertrail to see API request success\n\n## Next post in this series\n\n[Configuring a Delivery pipeline](/2017/01/18/Configuring-a-Delivery-Pipeline/)\n","source":"_posts/Deploying-the-API.md","raw":"---\ntitle: Deploying the API\ndate: 2017-01-18 17:00:20\ntags:\n---\n\n## tl;dr\n\nHeroku provides easy code deployments.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6TWhuTV85NHJTdGM/view)\n\n## Transcript\n\n1. New Pipeline\n    1. Same name as your app\n    2. connect to github\n    3. search for your repo and connect\n    4. Click into production stage\n    5. Click deploy tab\n    6. Enable automatic deployments from master\n2. First attempt to deploy to production stage\n    1. git status and confirm .env is not listed\n    2. git add, commit, push\n    3. `heroku ps` OR `heroku ps:scale web=1`\n    4. Wait for deployment success, try to curl, and be sad. What happened?\n3. Add Papertrail to troublshoot\n    1. `heroku addons:create papertrail:choklad`\n    2. Create  Procfile with contents  web: node index.js since we likely will need in the future\n    3. Git add, commit, push\n    4. Wait for deployment again, and see it still doesn't work.\n    5. Look at Resources > Papertrail and note problem binding do port\n4. Update index.js to bind to port 5000\n    1. var port = process.env.PORT || 8080;\n    2. console.log(`REST server listening on ${port}`);\n    3. server.listen(port);`\n    4. Confirm heroku local still works and you see port 5000 message\n    5. Git add, commit, push\n    6. GET /api/generic/card to confirm it worked\n    7. Look in Papertrail to see API request success\n\n## Next post in this series\n\n[Configuring a Delivery pipeline](/2017/01/18/Configuring-a-Delivery-Pipeline/)\n","slug":"Deploying-the-API","published":1,"updated":"2017-01-18T23:39:10.000Z","_id":"ciy3jfq5e00040zrr5ot4ew4v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku provides easy code deployments.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6TWhuTV85NHJTdGM/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>New Pipeline<ol>\n<li>Same name as your app</li>\n<li>connect to github</li>\n<li>search for your repo and connect</li>\n<li>Click into production stage</li>\n<li>Click deploy tab</li>\n<li>Enable automatic deployments from master</li>\n</ol>\n</li>\n<li>First attempt to deploy to production stage<ol>\n<li>git status and confirm .env is not listed</li>\n<li>git add, commit, push</li>\n<li><code>heroku ps</code> OR <code>heroku ps:scale web=1</code></li>\n<li>Wait for deployment success, try to curl, and be sad. What happened?</li>\n</ol>\n</li>\n<li>Add Papertrail to troublshoot<ol>\n<li><code>heroku addons:create papertrail:choklad</code></li>\n<li>Create  Procfile with contents  web: node index.js since we likely will need in the future</li>\n<li>Git add, commit, push</li>\n<li>Wait for deployment again, and see it still doesn’t work.</li>\n<li>Look at Resources &gt; Papertrail and note problem binding do port</li>\n</ol>\n</li>\n<li>Update index.js to bind to port 5000<ol>\n<li>var port = process.env.PORT || 8080;</li>\n<li>console.log(<code>REST server listening on ${port}</code>);</li>\n<li>server.listen(port);`</li>\n<li>Confirm heroku local still works and you see port 5000 message</li>\n<li>Git add, commit, push</li>\n<li>GET /api/generic/card to confirm it worked</li>\n<li>Look in Papertrail to see API request success</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Configuring-a-Delivery-Pipeline/\">Configuring a Delivery pipeline</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku provides easy code deployments.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6TWhuTV85NHJTdGM/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>New Pipeline<ol>\n<li>Same name as your app</li>\n<li>connect to github</li>\n<li>search for your repo and connect</li>\n<li>Click into production stage</li>\n<li>Click deploy tab</li>\n<li>Enable automatic deployments from master</li>\n</ol>\n</li>\n<li>First attempt to deploy to production stage<ol>\n<li>git status and confirm .env is not listed</li>\n<li>git add, commit, push</li>\n<li><code>heroku ps</code> OR <code>heroku ps:scale web=1</code></li>\n<li>Wait for deployment success, try to curl, and be sad. What happened?</li>\n</ol>\n</li>\n<li>Add Papertrail to troublshoot<ol>\n<li><code>heroku addons:create papertrail:choklad</code></li>\n<li>Create  Procfile with contents  web: node index.js since we likely will need in the future</li>\n<li>Git add, commit, push</li>\n<li>Wait for deployment again, and see it still doesn’t work.</li>\n<li>Look at Resources &gt; Papertrail and note problem binding do port</li>\n</ol>\n</li>\n<li>Update index.js to bind to port 5000<ol>\n<li>var port = process.env.PORT || 8080;</li>\n<li>console.log(<code>REST server listening on ${port}</code>);</li>\n<li>server.listen(port);`</li>\n<li>Confirm heroku local still works and you see port 5000 message</li>\n<li>Git add, commit, push</li>\n<li>GET /api/generic/card to confirm it worked</li>\n<li>Look in Papertrail to see API request success</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Configuring-a-Delivery-Pipeline/\">Configuring a Delivery pipeline</a></p>\n"},{"title":"Generating a RESTful API with Restify","date":"2017-01-13T20:01:51.000Z","_content":"\n## tl;dr\n\nWe use the magical pg-restify library to auto-discover our database schema and generate RESTful services for all of our tables.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6a3diSHExSUQ4RzA/view)\n\n## Transcript\n\n1. Create a git repository\n    1. Create a GitHub repository with a README and .gitignore\n    2. Open your terminal\n    3. Clone the repo\n2. Initialize the project with Yarn\n    1. `yarn init`\n    2. v0.0.1\n    3. `yarn add restify pg-restify`\n    4. `\"scripts\": { \"start\" : \"node ./index.js\"}`\n3. Connect to Heroku app\n    1. `heroku login`\n    2. `heroku git:remote -a davedemo-cardset`\n    3. `git remote -v`\n    4. `heroku config:get DATABASE_URL -s >> .env`\n    5. add .env to .gitignore\n    6. `git status` to confirm you are ignoring .env\n4. Configure pg-restify\n    1. Copy example server from https://www.npmjs.com/package/pg-restify\n    2. `pbpaste > index.js`\n    3. `pgConfig: process.env.DATABASE_URL + '?ssl=true'`\n    4. Run `heroku local` to export config vars and run this locally\n    5. `curl http://localhost:8080/api/generic/card` to confirm API server is running\n    6. Use Postman to GET a single card\n\n## Next post in this series\n\n[Deploying the API](/2017/01/18/Deploying-the-API/)\n","source":"_posts/Generating-a-RESTful-API-with-Restify.md","raw":"---\ntitle: Generating a RESTful API with Restify\ndate: 2017-01-13 15:01:51\ntags:\n---\n\n## tl;dr\n\nWe use the magical pg-restify library to auto-discover our database schema and generate RESTful services for all of our tables.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6a3diSHExSUQ4RzA/view)\n\n## Transcript\n\n1. Create a git repository\n    1. Create a GitHub repository with a README and .gitignore\n    2. Open your terminal\n    3. Clone the repo\n2. Initialize the project with Yarn\n    1. `yarn init`\n    2. v0.0.1\n    3. `yarn add restify pg-restify`\n    4. `\"scripts\": { \"start\" : \"node ./index.js\"}`\n3. Connect to Heroku app\n    1. `heroku login`\n    2. `heroku git:remote -a davedemo-cardset`\n    3. `git remote -v`\n    4. `heroku config:get DATABASE_URL -s >> .env`\n    5. add .env to .gitignore\n    6. `git status` to confirm you are ignoring .env\n4. Configure pg-restify\n    1. Copy example server from https://www.npmjs.com/package/pg-restify\n    2. `pbpaste > index.js`\n    3. `pgConfig: process.env.DATABASE_URL + '?ssl=true'`\n    4. Run `heroku local` to export config vars and run this locally\n    5. `curl http://localhost:8080/api/generic/card` to confirm API server is running\n    6. Use Postman to GET a single card\n\n## Next post in this series\n\n[Deploying the API](/2017/01/18/Deploying-the-API/)\n","slug":"Generating-a-RESTful-API-with-Restify","published":1,"updated":"2017-01-18T23:32:51.000Z","_id":"ciy3jfq5g00050zrrbqroh9y1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>We use the magical pg-restify library to auto-discover our database schema and generate RESTful services for all of our tables.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6a3diSHExSUQ4RzA/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create a git repository<ol>\n<li>Create a GitHub repository with a README and .gitignore</li>\n<li>Open your terminal</li>\n<li>Clone the repo</li>\n</ol>\n</li>\n<li>Initialize the project with Yarn<ol>\n<li><code>yarn init</code></li>\n<li>v0.0.1</li>\n<li><code>yarn add restify pg-restify</code></li>\n<li><code>&quot;scripts&quot;: { &quot;start&quot; : &quot;node ./index.js&quot;}</code></li>\n</ol>\n</li>\n<li>Connect to Heroku app<ol>\n<li><code>heroku login</code></li>\n<li><code>heroku git:remote -a davedemo-cardset</code></li>\n<li><code>git remote -v</code></li>\n<li><code>heroku config:get DATABASE_URL -s &gt;&gt; .env</code></li>\n<li>add .env to .gitignore</li>\n<li><code>git status</code> to confirm you are ignoring .env</li>\n</ol>\n</li>\n<li>Configure pg-restify<ol>\n<li>Copy example server from <a href=\"https://www.npmjs.com/package/pg-restify\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/pg-restify</a></li>\n<li><code>pbpaste &gt; index.js</code></li>\n<li><code>pgConfig: process.env.DATABASE_URL + &#39;?ssl=true&#39;</code></li>\n<li>Run <code>heroku local</code> to export config vars and run this locally</li>\n<li><code>curl http://localhost:8080/api/generic/card</code> to confirm API server is running</li>\n<li>Use Postman to GET a single card</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Deploying-the-API/\">Deploying the API</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>We use the magical pg-restify library to auto-discover our database schema and generate RESTful services for all of our tables.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6a3diSHExSUQ4RzA/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create a git repository<ol>\n<li>Create a GitHub repository with a README and .gitignore</li>\n<li>Open your terminal</li>\n<li>Clone the repo</li>\n</ol>\n</li>\n<li>Initialize the project with Yarn<ol>\n<li><code>yarn init</code></li>\n<li>v0.0.1</li>\n<li><code>yarn add restify pg-restify</code></li>\n<li><code>&quot;scripts&quot;: { &quot;start&quot; : &quot;node ./index.js&quot;}</code></li>\n</ol>\n</li>\n<li>Connect to Heroku app<ol>\n<li><code>heroku login</code></li>\n<li><code>heroku git:remote -a davedemo-cardset</code></li>\n<li><code>git remote -v</code></li>\n<li><code>heroku config:get DATABASE_URL -s &gt;&gt; .env</code></li>\n<li>add .env to .gitignore</li>\n<li><code>git status</code> to confirm you are ignoring .env</li>\n</ol>\n</li>\n<li>Configure pg-restify<ol>\n<li>Copy example server from <a href=\"https://www.npmjs.com/package/pg-restify\">https://www.npmjs.com/package/pg-restify</a></li>\n<li><code>pbpaste &gt; index.js</code></li>\n<li><code>pgConfig: process.env.DATABASE_URL + &#39;?ssl=true&#39;</code></li>\n<li>Run <code>heroku local</code> to export config vars and run this locally</li>\n<li><code>curl http://localhost:8080/api/generic/card</code> to confirm API server is running</li>\n<li>Use Postman to GET a single card</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Deploying-the-API/\">Deploying the API</a></p>\n"},{"title":"Getting Started with PostgreSQL on Heroku","date":"2017-01-13T20:01:25.000Z","_content":"\n## tl;dr\n\nHeroku provides free, managed PostgreSQL databases.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6V3VVd0p2c29VVFU/view)\n\n## Transcript\n\n1. Create Heroku account\n    1. Go to heroku.com (http://heroku.com/) and signup if you do not have an account\n    2. Show the menu and describe elements\n        1. add-ons\n        2. buttons\n        3. build packs\n    3. Return to the dashboard\n2. Create Heroku app\n    1. Confirm ***customer-project-stage*** is available for *customer-project*, *customer-project-develop*, and *customer-project-staging*\n    2. We're not going to do anything related to the app itself yet\n3. Create PostgreSQL database add-on\n    1. Add PostgreSQL\n    2. Click in and wait for health check to pass\n4. Connect to PostgreSQL database with a SQL client\n    1. Create a new connection\n\n## Next post in this series\n\n[Creating the Database](/2017/01/18/Creating-the-Database/)\n","source":"_posts/Getting-Started-with-PostgreSQL-on-Heroku.md","raw":"---\ntitle: Getting Started with PostgreSQL on Heroku\ndate: 2017-01-13 15:01:25\ntags:\n---\n\n## tl;dr\n\nHeroku provides free, managed PostgreSQL databases.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6V3VVd0p2c29VVFU/view)\n\n## Transcript\n\n1. Create Heroku account\n    1. Go to heroku.com (http://heroku.com/) and signup if you do not have an account\n    2. Show the menu and describe elements\n        1. add-ons\n        2. buttons\n        3. build packs\n    3. Return to the dashboard\n2. Create Heroku app\n    1. Confirm ***customer-project-stage*** is available for *customer-project*, *customer-project-develop*, and *customer-project-staging*\n    2. We're not going to do anything related to the app itself yet\n3. Create PostgreSQL database add-on\n    1. Add PostgreSQL\n    2. Click in and wait for health check to pass\n4. Connect to PostgreSQL database with a SQL client\n    1. Create a new connection\n\n## Next post in this series\n\n[Creating the Database](/2017/01/18/Creating-the-Database/)\n","slug":"Getting-Started-with-PostgreSQL-on-Heroku","published":1,"updated":"2017-01-18T23:22:17.000Z","_id":"ciy3jfq5k00060zrr6me9g9xm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku provides free, managed PostgreSQL databases.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6V3VVd0p2c29VVFU/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create Heroku account<ol>\n<li>Go to heroku.com (<a href=\"http://heroku.com/\" target=\"_blank\" rel=\"external\">http://heroku.com/</a>) and signup if you do not have an account</li>\n<li>Show the menu and describe elements<ol>\n<li>add-ons</li>\n<li>buttons</li>\n<li>build packs</li>\n</ol>\n</li>\n<li>Return to the dashboard</li>\n</ol>\n</li>\n<li>Create Heroku app<ol>\n<li>Confirm <strong><em>customer-project-stage</em></strong> is available for <em>customer-project</em>, <em>customer-project-develop</em>, and <em>customer-project-staging</em></li>\n<li>We’re not going to do anything related to the app itself yet</li>\n</ol>\n</li>\n<li>Create PostgreSQL database add-on<ol>\n<li>Add PostgreSQL</li>\n<li>Click in and wait for health check to pass</li>\n</ol>\n</li>\n<li>Connect to PostgreSQL database with a SQL client<ol>\n<li>Create a new connection</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Creating-the-Database/\">Creating the Database</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Heroku provides free, managed PostgreSQL databases.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6V3VVd0p2c29VVFU/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create Heroku account<ol>\n<li>Go to heroku.com (<a href=\"http://heroku.com/\">http://heroku.com/</a>) and signup if you do not have an account</li>\n<li>Show the menu and describe elements<ol>\n<li>add-ons</li>\n<li>buttons</li>\n<li>build packs</li>\n</ol>\n</li>\n<li>Return to the dashboard</li>\n</ol>\n</li>\n<li>Create Heroku app<ol>\n<li>Confirm <strong><em>customer-project-stage</em></strong> is available for <em>customer-project</em>, <em>customer-project-develop</em>, and <em>customer-project-staging</em></li>\n<li>We’re not going to do anything related to the app itself yet</li>\n</ol>\n</li>\n<li>Create PostgreSQL database add-on<ol>\n<li>Add PostgreSQL</li>\n<li>Click in and wait for health check to pass</li>\n</ol>\n</li>\n<li>Connect to PostgreSQL database with a SQL client<ol>\n<li>Create a new connection</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/18/Creating-the-Database/\">Creating the Database</a></p>\n"},{"title":"Organizing the Project Folder","date":"2017-01-18T22:00:49.000Z","_content":"\n## tl;dr\n\nEvery project repository should include details for how to install and run the software.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6a0RWS19rRnA3MXc/view)\n\n## Transcript\n\n1. Move SQL files to a sql/ folder\n2. Create a Postman collection and add to a docs/ folder\n3. Write install and running instruction in README\n4. Commit and push.\n\n## Next post in this series\n\nComing soon.\n","source":"_posts/Organizing-the-Project-Folder.md","raw":"---\ntitle: Organizing the Project Folder\ndate: 2017-01-18 17:00:49\ntags:\n---\n\n## tl;dr\n\nEvery project repository should include details for how to install and run the software.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6a0RWS19rRnA3MXc/view)\n\n## Transcript\n\n1. Move SQL files to a sql/ folder\n2. Create a Postman collection and add to a docs/ folder\n3. Write install and running instruction in README\n4. Commit and push.\n\n## Next post in this series\n\nComing soon.\n","slug":"Organizing-the-Project-Folder","published":1,"updated":"2017-01-18T23:44:45.000Z","_id":"ciy3jfq5m00070zrr0vev57tk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Every project repository should include details for how to install and run the software.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6a0RWS19rRnA3MXc/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Move SQL files to a sql/ folder</li>\n<li>Create a Postman collection and add to a docs/ folder</li>\n<li>Write install and running instruction in README</li>\n<li>Commit and push.</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p>Coming soon.</p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Every project repository should include details for how to install and run the software.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6a0RWS19rRnA3MXc/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Move SQL files to a sql/ folder</li>\n<li>Create a Postman collection and add to a docs/ folder</li>\n<li>Write install and running instruction in README</li>\n<li>Commit and push.</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p>Coming soon.</p>\n"},{"title":"Priorities Instead of Resolutions in 2017","date":"2016-11-25T19:40:36.000Z","_content":"\nI cannot remember why or how I decided last December (2015) to learn how to solve a Rubik's cube. I probably just stumbled across some post somewhere and then made an impulsive Amazon buy. This is a common pattern for me: I try many things but stick with few. On the upside, I'm very good at triaging things and connecting new knowledge into my existing frameworks. The downside is that I've always struggled at learning or doing something completely new without some existing framework or related skills.\n\nWhen the cube arrived at the start of my holiday vacation time, I sat down and started to learn how to solve with a beginner's method tutorial. Three concepts converged for me, but I could not articulate the cumulative importance until now.\n\n## Decompose an impossible quest into a series of possible tasks\n\nAs an educator, it's obvious that students must learn fundamentals and then extend through practice on the way to mastery. While I know this conceptually, it is a lot harder to follow these principles when you are self-learning. Mentors are immensely valuable, and you should definitely try to find them, but not everything you want to do warrants mentorship.\n\nI wanted to solve this Rubik's cube. I had no specific timeline or reason for solving it, so I didn't have any external factors compelling me to overly focus on the end result. The beginner tutorial broke down the solution into seven steps, so I asked myself how I would feel if I consistently could solve the first step in a week. This felt both good and reasonable. My journey began.\n\nAlthough tempted to plow ahead and follow all the the steps to solve, I somehow restrained myself to only work on this very first step for a full week. I found gratification in the small movements of this single step, and this was enough upside to keep me focused on truly learning the foundation instead of looking ahead.\n\nI enjoyed learning the first step during my first week, so I moved on to the second step. Then the third and fourth. The fifth and sixth steps took more focus to learn, buy I already was a month along this path and in a groove. Keeping going seemed like a more natural action than stopping. Fiddling with the cube was part of my routine now.\n\nI actually never solved the cube a single time until I began practicing the seventh (and final) step. While I absolutely felt satisfied when I finally solved the cube for the first time, I found nearly as much satisfaction in becoming more proficient with the individual steps.\n\nBecause I found enjoyment in the minutiae of each step, I never felt the pressure to fully solve the cube. My goal wasn't to solve the cube. My goal was to just learn one more step.\n\n## Start a new thing when you have extra time\n\nThe first week doing anything new sucks. The second week also sucks, but at least there is less pain. After a few weeks, most anything becomes routine. Instead of starting new behaviors on January 1st, right when you're going back to work from holiday vacation, start at the beginning of your vacation!\n\nUnplugging for a week or so is great, but you know there is going to be a lot of idle time. For solving the Rubik's cube, I did a little here and there between football bowl games. I practiced in some longer 15- to 30-minute blocks. I was able to spend time with all of my visiting relatives and still slide in practice when I had no other pressures from work on my mind.\n\nThe sweet spot for me seems to be 30 minutes for three times per week as a minimum. I can do more, but I have chosen to not do less. Thirty minutes provides enough time to switch contexts and focus on the task. If I feel like going for an hour, no harm, but I still have to practice the new thing three times per week for a minimum of 30 minutes per session.\n\nI'm trying not to bite off too much. I have a lifetime of stuff to learn and skills to improve, so I'm limiting myself to four priorities per year. Adding up my minimal time commitments, this means I just need to commit to a minimum of 6 hours per week. That's not much! Again, there's nothing stopping me from spending more time if I'm feeling good and can afford the time, but at least I've set a baseline. I won't be world-class by spending 78 hours minimum per year on a new thing, but I'll sure as heck be immensely better than I was before.\n\nStaring new things during a period of low pressure, like holiday breaks, worked tremendously well for me. Setting a weekly commitment of 90 minutes per priority is small enough that I can squeeze in the time even when work and life pressures are high.\n\n## Emphasize good behavior instead of eliminating bad behavior\n\nMy second priority for 2016 was to get back in shape. Before I had a family, I was more able to follow a restrictive diet. I'd also try stuff like \"no beer during the week,\" but then a friend would come into town or I'd have a work outing. While I could follow these kind of punishment plans for a little while, ultra-restrictive eating is difficult to sustain longterm and just not possible to follow when you actually interact with other humans.\n\nInstead of focusing on eliminating bad things, this year I emphasized increasing positive behaviors. For my dieting, I decided to eat five salads per week. No other rules. I still eat the same dinner with my family, and I can have beers with friends. Previously I ate zero salads per week. While such a narrow focus may seem fruitless, it gave me a strategy that I could follow perfectly. I didn't have to eat salads every lunch, but that is my go to meal. If a friend is visiting, or I have a business lunch, I'll eat whatever looks good -- burger, tacos, whatever -- then I just have to make up my salad some other time during the week.\n\nEmphasizing good behavior got me into a mindset of favoring action. My rule to just do the good behavior of eating salads five times per week had the natural consequence of eliminating some of my unhealthy eating because, hey, there are just so many meals in a week. Instead of feeling guilty for breaking a rule, I always felt good when I checked off one of my salads. I'm ending 2016 down 40 pounds and at my leanest in a decade.\n\n## 2017: Diversify and generalize priorities with minimal requirements.\n\nI made solid personal progress in 2016, and I'm confident 2017 will be even better if I focus on my priorities and don't dwell on seemingly unattainable goals. I'm also going to generalize my priorities a bit to be more adaptable to changing value. Instead of saying I must run three times per week, I'll just ensure I exercise three times per week. As long as I exercise for 30 minutes, and my heart rate reaches 140, then I'll consider my priority met.\n\n### Fitness\n\nI never imagined I would enjoy jogging, but it happened. Plodding low and slow for an hour has become meditative in a way. Jogging has been a tremendous for me to get my back into reasonable shape, but I should not lock myself into a single mode of exercise. My body needs to bend and flex. I (hopefully) have another 50 years to go on this chassis, so I need to keep it tuned. Being lean isn't a goal. Moving my body in different ways is the priority.\n\nI will find types of movement that are awkward and painful. I will merely enjoy the minutiae of fitness regardless of the activity.\n\n### Drumming\n\nI've been taking drum lessons for a couple months, and I'm enjoying, but I know I have been lying to myself about goals vs priorities. I have certain songs I want to play, and when I'm not making linear progress toward these songs, I feel like I'm failing and practice less. Heretofore, I will not care about any specific songs, beats, patterns, or rudiments. I will only care about practicing diligently three times per week for 30 minutes per session.\n\nI will play slowly and thoughtfully. I will not rush. I may play longer, and I may play songs, but that is not the priority. My priority is deliberate practice. I will have no specific goal to achieve. I will merely enjoy the minutiae of drumming.\n\n### Programming\n\nPerhaps my biggest failing in 2016 was to reach my goal of releasing an iOS app in the App Store. I spent a ton of time on nights and weekends with Swift and built many small things, but I never got into a rhythm or really congealed a reason to publish. I had set an arbitrary goal that lacked any semblance of a priority.\n\nFor 2017, I will merely commit to programming for 30 minutes for three times per week. I'm going to focus on JavaScript to start because a) it is what I know best, b) it is broadly useful. I will not focus on a specific framework or project or goal. I will merely enjoy the minutiae of programming. If I feel like writing in a different language, I should do this. I have no specific goal or reason to only write JavaScript, so I should not base the value of my time on an arbitrary outcome.\n\n### Tinkering\n\nI have not focused on creative output in many years, and I will prioritize creativity in 2017. I will tinker. I may build circuits. I may build science projects with my kids. I may modify a bicycle or my truck or some other machine. There will be no direct value of this tinkering to my job. I will tinker because I enjoy understanding how things work. I will merely enjoy the minutiae of building a thing, deconstructing a thing, or modifying a thing.\n\n## 6 hours\n\nIf you've read this far, then you realize this post is primarily a contact I'm writing to myself. I'm committing to 6 hours per week to improve my body, profession, and mind. I have no goals or resolutions. I will enjoy the steps along the way. I may travel a short distance or a far distance, but I will approach 2017 by merely putting one foot in front of the other.\n","source":"_posts/Priorities-Instead-of-Resolutions.md","raw":"---\ntitle: Priorities Instead of Resolutions in 2017\ndate: 2016-11-25 14:40:36\ntags:\n---\n\nI cannot remember why or how I decided last December (2015) to learn how to solve a Rubik's cube. I probably just stumbled across some post somewhere and then made an impulsive Amazon buy. This is a common pattern for me: I try many things but stick with few. On the upside, I'm very good at triaging things and connecting new knowledge into my existing frameworks. The downside is that I've always struggled at learning or doing something completely new without some existing framework or related skills.\n\nWhen the cube arrived at the start of my holiday vacation time, I sat down and started to learn how to solve with a beginner's method tutorial. Three concepts converged for me, but I could not articulate the cumulative importance until now.\n\n## Decompose an impossible quest into a series of possible tasks\n\nAs an educator, it's obvious that students must learn fundamentals and then extend through practice on the way to mastery. While I know this conceptually, it is a lot harder to follow these principles when you are self-learning. Mentors are immensely valuable, and you should definitely try to find them, but not everything you want to do warrants mentorship.\n\nI wanted to solve this Rubik's cube. I had no specific timeline or reason for solving it, so I didn't have any external factors compelling me to overly focus on the end result. The beginner tutorial broke down the solution into seven steps, so I asked myself how I would feel if I consistently could solve the first step in a week. This felt both good and reasonable. My journey began.\n\nAlthough tempted to plow ahead and follow all the the steps to solve, I somehow restrained myself to only work on this very first step for a full week. I found gratification in the small movements of this single step, and this was enough upside to keep me focused on truly learning the foundation instead of looking ahead.\n\nI enjoyed learning the first step during my first week, so I moved on to the second step. Then the third and fourth. The fifth and sixth steps took more focus to learn, buy I already was a month along this path and in a groove. Keeping going seemed like a more natural action than stopping. Fiddling with the cube was part of my routine now.\n\nI actually never solved the cube a single time until I began practicing the seventh (and final) step. While I absolutely felt satisfied when I finally solved the cube for the first time, I found nearly as much satisfaction in becoming more proficient with the individual steps.\n\nBecause I found enjoyment in the minutiae of each step, I never felt the pressure to fully solve the cube. My goal wasn't to solve the cube. My goal was to just learn one more step.\n\n## Start a new thing when you have extra time\n\nThe first week doing anything new sucks. The second week also sucks, but at least there is less pain. After a few weeks, most anything becomes routine. Instead of starting new behaviors on January 1st, right when you're going back to work from holiday vacation, start at the beginning of your vacation!\n\nUnplugging for a week or so is great, but you know there is going to be a lot of idle time. For solving the Rubik's cube, I did a little here and there between football bowl games. I practiced in some longer 15- to 30-minute blocks. I was able to spend time with all of my visiting relatives and still slide in practice when I had no other pressures from work on my mind.\n\nThe sweet spot for me seems to be 30 minutes for three times per week as a minimum. I can do more, but I have chosen to not do less. Thirty minutes provides enough time to switch contexts and focus on the task. If I feel like going for an hour, no harm, but I still have to practice the new thing three times per week for a minimum of 30 minutes per session.\n\nI'm trying not to bite off too much. I have a lifetime of stuff to learn and skills to improve, so I'm limiting myself to four priorities per year. Adding up my minimal time commitments, this means I just need to commit to a minimum of 6 hours per week. That's not much! Again, there's nothing stopping me from spending more time if I'm feeling good and can afford the time, but at least I've set a baseline. I won't be world-class by spending 78 hours minimum per year on a new thing, but I'll sure as heck be immensely better than I was before.\n\nStaring new things during a period of low pressure, like holiday breaks, worked tremendously well for me. Setting a weekly commitment of 90 minutes per priority is small enough that I can squeeze in the time even when work and life pressures are high.\n\n## Emphasize good behavior instead of eliminating bad behavior\n\nMy second priority for 2016 was to get back in shape. Before I had a family, I was more able to follow a restrictive diet. I'd also try stuff like \"no beer during the week,\" but then a friend would come into town or I'd have a work outing. While I could follow these kind of punishment plans for a little while, ultra-restrictive eating is difficult to sustain longterm and just not possible to follow when you actually interact with other humans.\n\nInstead of focusing on eliminating bad things, this year I emphasized increasing positive behaviors. For my dieting, I decided to eat five salads per week. No other rules. I still eat the same dinner with my family, and I can have beers with friends. Previously I ate zero salads per week. While such a narrow focus may seem fruitless, it gave me a strategy that I could follow perfectly. I didn't have to eat salads every lunch, but that is my go to meal. If a friend is visiting, or I have a business lunch, I'll eat whatever looks good -- burger, tacos, whatever -- then I just have to make up my salad some other time during the week.\n\nEmphasizing good behavior got me into a mindset of favoring action. My rule to just do the good behavior of eating salads five times per week had the natural consequence of eliminating some of my unhealthy eating because, hey, there are just so many meals in a week. Instead of feeling guilty for breaking a rule, I always felt good when I checked off one of my salads. I'm ending 2016 down 40 pounds and at my leanest in a decade.\n\n## 2017: Diversify and generalize priorities with minimal requirements.\n\nI made solid personal progress in 2016, and I'm confident 2017 will be even better if I focus on my priorities and don't dwell on seemingly unattainable goals. I'm also going to generalize my priorities a bit to be more adaptable to changing value. Instead of saying I must run three times per week, I'll just ensure I exercise three times per week. As long as I exercise for 30 minutes, and my heart rate reaches 140, then I'll consider my priority met.\n\n### Fitness\n\nI never imagined I would enjoy jogging, but it happened. Plodding low and slow for an hour has become meditative in a way. Jogging has been a tremendous for me to get my back into reasonable shape, but I should not lock myself into a single mode of exercise. My body needs to bend and flex. I (hopefully) have another 50 years to go on this chassis, so I need to keep it tuned. Being lean isn't a goal. Moving my body in different ways is the priority.\n\nI will find types of movement that are awkward and painful. I will merely enjoy the minutiae of fitness regardless of the activity.\n\n### Drumming\n\nI've been taking drum lessons for a couple months, and I'm enjoying, but I know I have been lying to myself about goals vs priorities. I have certain songs I want to play, and when I'm not making linear progress toward these songs, I feel like I'm failing and practice less. Heretofore, I will not care about any specific songs, beats, patterns, or rudiments. I will only care about practicing diligently three times per week for 30 minutes per session.\n\nI will play slowly and thoughtfully. I will not rush. I may play longer, and I may play songs, but that is not the priority. My priority is deliberate practice. I will have no specific goal to achieve. I will merely enjoy the minutiae of drumming.\n\n### Programming\n\nPerhaps my biggest failing in 2016 was to reach my goal of releasing an iOS app in the App Store. I spent a ton of time on nights and weekends with Swift and built many small things, but I never got into a rhythm or really congealed a reason to publish. I had set an arbitrary goal that lacked any semblance of a priority.\n\nFor 2017, I will merely commit to programming for 30 minutes for three times per week. I'm going to focus on JavaScript to start because a) it is what I know best, b) it is broadly useful. I will not focus on a specific framework or project or goal. I will merely enjoy the minutiae of programming. If I feel like writing in a different language, I should do this. I have no specific goal or reason to only write JavaScript, so I should not base the value of my time on an arbitrary outcome.\n\n### Tinkering\n\nI have not focused on creative output in many years, and I will prioritize creativity in 2017. I will tinker. I may build circuits. I may build science projects with my kids. I may modify a bicycle or my truck or some other machine. There will be no direct value of this tinkering to my job. I will tinker because I enjoy understanding how things work. I will merely enjoy the minutiae of building a thing, deconstructing a thing, or modifying a thing.\n\n## 6 hours\n\nIf you've read this far, then you realize this post is primarily a contact I'm writing to myself. I'm committing to 6 hours per week to improve my body, profession, and mind. I have no goals or resolutions. I will enjoy the steps along the way. I may travel a short distance or a far distance, but I will approach 2017 by merely putting one foot in front of the other.\n","slug":"Priorities-Instead-of-Resolutions","published":1,"updated":"2017-01-18T21:54:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy3jfq5q00080zrrtmyrckzo","content":"<p>I cannot remember why or how I decided last December (2015) to learn how to solve a Rubik’s cube. I probably just stumbled across some post somewhere and then made an impulsive Amazon buy. This is a common pattern for me: I try many things but stick with few. On the upside, I’m very good at triaging things and connecting new knowledge into my existing frameworks. The downside is that I’ve always struggled at learning or doing something completely new without some existing framework or related skills.</p>\n<p>When the cube arrived at the start of my holiday vacation time, I sat down and started to learn how to solve with a beginner’s method tutorial. Three concepts converged for me, but I could not articulate the cumulative importance until now.</p>\n<h2 id=\"Decompose-an-impossible-quest-into-a-series-of-possible-tasks\"><a href=\"#Decompose-an-impossible-quest-into-a-series-of-possible-tasks\" class=\"headerlink\" title=\"Decompose an impossible quest into a series of possible tasks\"></a>Decompose an impossible quest into a series of possible tasks</h2><p>As an educator, it’s obvious that students must learn fundamentals and then extend through practice on the way to mastery. While I know this conceptually, it is a lot harder to follow these principles when you are self-learning. Mentors are immensely valuable, and you should definitely try to find them, but not everything you want to do warrants mentorship.</p>\n<p>I wanted to solve this Rubik’s cube. I had no specific timeline or reason for solving it, so I didn’t have any external factors compelling me to overly focus on the end result. The beginner tutorial broke down the solution into seven steps, so I asked myself how I would feel if I consistently could solve the first step in a week. This felt both good and reasonable. My journey began.</p>\n<p>Although tempted to plow ahead and follow all the the steps to solve, I somehow restrained myself to only work on this very first step for a full week. I found gratification in the small movements of this single step, and this was enough upside to keep me focused on truly learning the foundation instead of looking ahead.</p>\n<p>I enjoyed learning the first step during my first week, so I moved on to the second step. Then the third and fourth. The fifth and sixth steps took more focus to learn, buy I already was a month along this path and in a groove. Keeping going seemed like a more natural action than stopping. Fiddling with the cube was part of my routine now.</p>\n<p>I actually never solved the cube a single time until I began practicing the seventh (and final) step. While I absolutely felt satisfied when I finally solved the cube for the first time, I found nearly as much satisfaction in becoming more proficient with the individual steps.</p>\n<p>Because I found enjoyment in the minutiae of each step, I never felt the pressure to fully solve the cube. My goal wasn’t to solve the cube. My goal was to just learn one more step.</p>\n<h2 id=\"Start-a-new-thing-when-you-have-extra-time\"><a href=\"#Start-a-new-thing-when-you-have-extra-time\" class=\"headerlink\" title=\"Start a new thing when you have extra time\"></a>Start a new thing when you have extra time</h2><p>The first week doing anything new sucks. The second week also sucks, but at least there is less pain. After a few weeks, most anything becomes routine. Instead of starting new behaviors on January 1st, right when you’re going back to work from holiday vacation, start at the beginning of your vacation!</p>\n<p>Unplugging for a week or so is great, but you know there is going to be a lot of idle time. For solving the Rubik’s cube, I did a little here and there between football bowl games. I practiced in some longer 15- to 30-minute blocks. I was able to spend time with all of my visiting relatives and still slide in practice when I had no other pressures from work on my mind.</p>\n<p>The sweet spot for me seems to be 30 minutes for three times per week as a minimum. I can do more, but I have chosen to not do less. Thirty minutes provides enough time to switch contexts and focus on the task. If I feel like going for an hour, no harm, but I still have to practice the new thing three times per week for a minimum of 30 minutes per session.</p>\n<p>I’m trying not to bite off too much. I have a lifetime of stuff to learn and skills to improve, so I’m limiting myself to four priorities per year. Adding up my minimal time commitments, this means I just need to commit to a minimum of 6 hours per week. That’s not much! Again, there’s nothing stopping me from spending more time if I’m feeling good and can afford the time, but at least I’ve set a baseline. I won’t be world-class by spending 78 hours minimum per year on a new thing, but I’ll sure as heck be immensely better than I was before.</p>\n<p>Staring new things during a period of low pressure, like holiday breaks, worked tremendously well for me. Setting a weekly commitment of 90 minutes per priority is small enough that I can squeeze in the time even when work and life pressures are high.</p>\n<h2 id=\"Emphasize-good-behavior-instead-of-eliminating-bad-behavior\"><a href=\"#Emphasize-good-behavior-instead-of-eliminating-bad-behavior\" class=\"headerlink\" title=\"Emphasize good behavior instead of eliminating bad behavior\"></a>Emphasize good behavior instead of eliminating bad behavior</h2><p>My second priority for 2016 was to get back in shape. Before I had a family, I was more able to follow a restrictive diet. I’d also try stuff like “no beer during the week,” but then a friend would come into town or I’d have a work outing. While I could follow these kind of punishment plans for a little while, ultra-restrictive eating is difficult to sustain longterm and just not possible to follow when you actually interact with other humans.</p>\n<p>Instead of focusing on eliminating bad things, this year I emphasized increasing positive behaviors. For my dieting, I decided to eat five salads per week. No other rules. I still eat the same dinner with my family, and I can have beers with friends. Previously I ate zero salads per week. While such a narrow focus may seem fruitless, it gave me a strategy that I could follow perfectly. I didn’t have to eat salads every lunch, but that is my go to meal. If a friend is visiting, or I have a business lunch, I’ll eat whatever looks good – burger, tacos, whatever – then I just have to make up my salad some other time during the week.</p>\n<p>Emphasizing good behavior got me into a mindset of favoring action. My rule to just do the good behavior of eating salads five times per week had the natural consequence of eliminating some of my unhealthy eating because, hey, there are just so many meals in a week. Instead of feeling guilty for breaking a rule, I always felt good when I checked off one of my salads. I’m ending 2016 down 40 pounds and at my leanest in a decade.</p>\n<h2 id=\"2017-Diversify-and-generalize-priorities-with-minimal-requirements\"><a href=\"#2017-Diversify-and-generalize-priorities-with-minimal-requirements\" class=\"headerlink\" title=\"2017: Diversify and generalize priorities with minimal requirements.\"></a>2017: Diversify and generalize priorities with minimal requirements.</h2><p>I made solid personal progress in 2016, and I’m confident 2017 will be even better if I focus on my priorities and don’t dwell on seemingly unattainable goals. I’m also going to generalize my priorities a bit to be more adaptable to changing value. Instead of saying I must run three times per week, I’ll just ensure I exercise three times per week. As long as I exercise for 30 minutes, and my heart rate reaches 140, then I’ll consider my priority met.</p>\n<h3 id=\"Fitness\"><a href=\"#Fitness\" class=\"headerlink\" title=\"Fitness\"></a>Fitness</h3><p>I never imagined I would enjoy jogging, but it happened. Plodding low and slow for an hour has become meditative in a way. Jogging has been a tremendous for me to get my back into reasonable shape, but I should not lock myself into a single mode of exercise. My body needs to bend and flex. I (hopefully) have another 50 years to go on this chassis, so I need to keep it tuned. Being lean isn’t a goal. Moving my body in different ways is the priority.</p>\n<p>I will find types of movement that are awkward and painful. I will merely enjoy the minutiae of fitness regardless of the activity.</p>\n<h3 id=\"Drumming\"><a href=\"#Drumming\" class=\"headerlink\" title=\"Drumming\"></a>Drumming</h3><p>I’ve been taking drum lessons for a couple months, and I’m enjoying, but I know I have been lying to myself about goals vs priorities. I have certain songs I want to play, and when I’m not making linear progress toward these songs, I feel like I’m failing and practice less. Heretofore, I will not care about any specific songs, beats, patterns, or rudiments. I will only care about practicing diligently three times per week for 30 minutes per session.</p>\n<p>I will play slowly and thoughtfully. I will not rush. I may play longer, and I may play songs, but that is not the priority. My priority is deliberate practice. I will have no specific goal to achieve. I will merely enjoy the minutiae of drumming.</p>\n<h3 id=\"Programming\"><a href=\"#Programming\" class=\"headerlink\" title=\"Programming\"></a>Programming</h3><p>Perhaps my biggest failing in 2016 was to reach my goal of releasing an iOS app in the App Store. I spent a ton of time on nights and weekends with Swift and built many small things, but I never got into a rhythm or really congealed a reason to publish. I had set an arbitrary goal that lacked any semblance of a priority.</p>\n<p>For 2017, I will merely commit to programming for 30 minutes for three times per week. I’m going to focus on JavaScript to start because a) it is what I know best, b) it is broadly useful. I will not focus on a specific framework or project or goal. I will merely enjoy the minutiae of programming. If I feel like writing in a different language, I should do this. I have no specific goal or reason to only write JavaScript, so I should not base the value of my time on an arbitrary outcome.</p>\n<h3 id=\"Tinkering\"><a href=\"#Tinkering\" class=\"headerlink\" title=\"Tinkering\"></a>Tinkering</h3><p>I have not focused on creative output in many years, and I will prioritize creativity in 2017. I will tinker. I may build circuits. I may build science projects with my kids. I may modify a bicycle or my truck or some other machine. There will be no direct value of this tinkering to my job. I will tinker because I enjoy understanding how things work. I will merely enjoy the minutiae of building a thing, deconstructing a thing, or modifying a thing.</p>\n<h2 id=\"6-hours\"><a href=\"#6-hours\" class=\"headerlink\" title=\"6 hours\"></a>6 hours</h2><p>If you’ve read this far, then you realize this post is primarily a contact I’m writing to myself. I’m committing to 6 hours per week to improve my body, profession, and mind. I have no goals or resolutions. I will enjoy the steps along the way. I may travel a short distance or a far distance, but I will approach 2017 by merely putting one foot in front of the other.</p>\n","excerpt":"","more":"<p>I cannot remember why or how I decided last December (2015) to learn how to solve a Rubik’s cube. I probably just stumbled across some post somewhere and then made an impulsive Amazon buy. This is a common pattern for me: I try many things but stick with few. On the upside, I’m very good at triaging things and connecting new knowledge into my existing frameworks. The downside is that I’ve always struggled at learning or doing something completely new without some existing framework or related skills.</p>\n<p>When the cube arrived at the start of my holiday vacation time, I sat down and started to learn how to solve with a beginner’s method tutorial. Three concepts converged for me, but I could not articulate the cumulative importance until now.</p>\n<h2 id=\"Decompose-an-impossible-quest-into-a-series-of-possible-tasks\"><a href=\"#Decompose-an-impossible-quest-into-a-series-of-possible-tasks\" class=\"headerlink\" title=\"Decompose an impossible quest into a series of possible tasks\"></a>Decompose an impossible quest into a series of possible tasks</h2><p>As an educator, it’s obvious that students must learn fundamentals and then extend through practice on the way to mastery. While I know this conceptually, it is a lot harder to follow these principles when you are self-learning. Mentors are immensely valuable, and you should definitely try to find them, but not everything you want to do warrants mentorship.</p>\n<p>I wanted to solve this Rubik’s cube. I had no specific timeline or reason for solving it, so I didn’t have any external factors compelling me to overly focus on the end result. The beginner tutorial broke down the solution into seven steps, so I asked myself how I would feel if I consistently could solve the first step in a week. This felt both good and reasonable. My journey began.</p>\n<p>Although tempted to plow ahead and follow all the the steps to solve, I somehow restrained myself to only work on this very first step for a full week. I found gratification in the small movements of this single step, and this was enough upside to keep me focused on truly learning the foundation instead of looking ahead.</p>\n<p>I enjoyed learning the first step during my first week, so I moved on to the second step. Then the third and fourth. The fifth and sixth steps took more focus to learn, buy I already was a month along this path and in a groove. Keeping going seemed like a more natural action than stopping. Fiddling with the cube was part of my routine now.</p>\n<p>I actually never solved the cube a single time until I began practicing the seventh (and final) step. While I absolutely felt satisfied when I finally solved the cube for the first time, I found nearly as much satisfaction in becoming more proficient with the individual steps.</p>\n<p>Because I found enjoyment in the minutiae of each step, I never felt the pressure to fully solve the cube. My goal wasn’t to solve the cube. My goal was to just learn one more step.</p>\n<h2 id=\"Start-a-new-thing-when-you-have-extra-time\"><a href=\"#Start-a-new-thing-when-you-have-extra-time\" class=\"headerlink\" title=\"Start a new thing when you have extra time\"></a>Start a new thing when you have extra time</h2><p>The first week doing anything new sucks. The second week also sucks, but at least there is less pain. After a few weeks, most anything becomes routine. Instead of starting new behaviors on January 1st, right when you’re going back to work from holiday vacation, start at the beginning of your vacation!</p>\n<p>Unplugging for a week or so is great, but you know there is going to be a lot of idle time. For solving the Rubik’s cube, I did a little here and there between football bowl games. I practiced in some longer 15- to 30-minute blocks. I was able to spend time with all of my visiting relatives and still slide in practice when I had no other pressures from work on my mind.</p>\n<p>The sweet spot for me seems to be 30 minutes for three times per week as a minimum. I can do more, but I have chosen to not do less. Thirty minutes provides enough time to switch contexts and focus on the task. If I feel like going for an hour, no harm, but I still have to practice the new thing three times per week for a minimum of 30 minutes per session.</p>\n<p>I’m trying not to bite off too much. I have a lifetime of stuff to learn and skills to improve, so I’m limiting myself to four priorities per year. Adding up my minimal time commitments, this means I just need to commit to a minimum of 6 hours per week. That’s not much! Again, there’s nothing stopping me from spending more time if I’m feeling good and can afford the time, but at least I’ve set a baseline. I won’t be world-class by spending 78 hours minimum per year on a new thing, but I’ll sure as heck be immensely better than I was before.</p>\n<p>Staring new things during a period of low pressure, like holiday breaks, worked tremendously well for me. Setting a weekly commitment of 90 minutes per priority is small enough that I can squeeze in the time even when work and life pressures are high.</p>\n<h2 id=\"Emphasize-good-behavior-instead-of-eliminating-bad-behavior\"><a href=\"#Emphasize-good-behavior-instead-of-eliminating-bad-behavior\" class=\"headerlink\" title=\"Emphasize good behavior instead of eliminating bad behavior\"></a>Emphasize good behavior instead of eliminating bad behavior</h2><p>My second priority for 2016 was to get back in shape. Before I had a family, I was more able to follow a restrictive diet. I’d also try stuff like “no beer during the week,” but then a friend would come into town or I’d have a work outing. While I could follow these kind of punishment plans for a little while, ultra-restrictive eating is difficult to sustain longterm and just not possible to follow when you actually interact with other humans.</p>\n<p>Instead of focusing on eliminating bad things, this year I emphasized increasing positive behaviors. For my dieting, I decided to eat five salads per week. No other rules. I still eat the same dinner with my family, and I can have beers with friends. Previously I ate zero salads per week. While such a narrow focus may seem fruitless, it gave me a strategy that I could follow perfectly. I didn’t have to eat salads every lunch, but that is my go to meal. If a friend is visiting, or I have a business lunch, I’ll eat whatever looks good – burger, tacos, whatever – then I just have to make up my salad some other time during the week.</p>\n<p>Emphasizing good behavior got me into a mindset of favoring action. My rule to just do the good behavior of eating salads five times per week had the natural consequence of eliminating some of my unhealthy eating because, hey, there are just so many meals in a week. Instead of feeling guilty for breaking a rule, I always felt good when I checked off one of my salads. I’m ending 2016 down 40 pounds and at my leanest in a decade.</p>\n<h2 id=\"2017-Diversify-and-generalize-priorities-with-minimal-requirements\"><a href=\"#2017-Diversify-and-generalize-priorities-with-minimal-requirements\" class=\"headerlink\" title=\"2017: Diversify and generalize priorities with minimal requirements.\"></a>2017: Diversify and generalize priorities with minimal requirements.</h2><p>I made solid personal progress in 2016, and I’m confident 2017 will be even better if I focus on my priorities and don’t dwell on seemingly unattainable goals. I’m also going to generalize my priorities a bit to be more adaptable to changing value. Instead of saying I must run three times per week, I’ll just ensure I exercise three times per week. As long as I exercise for 30 minutes, and my heart rate reaches 140, then I’ll consider my priority met.</p>\n<h3 id=\"Fitness\"><a href=\"#Fitness\" class=\"headerlink\" title=\"Fitness\"></a>Fitness</h3><p>I never imagined I would enjoy jogging, but it happened. Plodding low and slow for an hour has become meditative in a way. Jogging has been a tremendous for me to get my back into reasonable shape, but I should not lock myself into a single mode of exercise. My body needs to bend and flex. I (hopefully) have another 50 years to go on this chassis, so I need to keep it tuned. Being lean isn’t a goal. Moving my body in different ways is the priority.</p>\n<p>I will find types of movement that are awkward and painful. I will merely enjoy the minutiae of fitness regardless of the activity.</p>\n<h3 id=\"Drumming\"><a href=\"#Drumming\" class=\"headerlink\" title=\"Drumming\"></a>Drumming</h3><p>I’ve been taking drum lessons for a couple months, and I’m enjoying, but I know I have been lying to myself about goals vs priorities. I have certain songs I want to play, and when I’m not making linear progress toward these songs, I feel like I’m failing and practice less. Heretofore, I will not care about any specific songs, beats, patterns, or rudiments. I will only care about practicing diligently three times per week for 30 minutes per session.</p>\n<p>I will play slowly and thoughtfully. I will not rush. I may play longer, and I may play songs, but that is not the priority. My priority is deliberate practice. I will have no specific goal to achieve. I will merely enjoy the minutiae of drumming.</p>\n<h3 id=\"Programming\"><a href=\"#Programming\" class=\"headerlink\" title=\"Programming\"></a>Programming</h3><p>Perhaps my biggest failing in 2016 was to reach my goal of releasing an iOS app in the App Store. I spent a ton of time on nights and weekends with Swift and built many small things, but I never got into a rhythm or really congealed a reason to publish. I had set an arbitrary goal that lacked any semblance of a priority.</p>\n<p>For 2017, I will merely commit to programming for 30 minutes for three times per week. I’m going to focus on JavaScript to start because a) it is what I know best, b) it is broadly useful. I will not focus on a specific framework or project or goal. I will merely enjoy the minutiae of programming. If I feel like writing in a different language, I should do this. I have no specific goal or reason to only write JavaScript, so I should not base the value of my time on an arbitrary outcome.</p>\n<h3 id=\"Tinkering\"><a href=\"#Tinkering\" class=\"headerlink\" title=\"Tinkering\"></a>Tinkering</h3><p>I have not focused on creative output in many years, and I will prioritize creativity in 2017. I will tinker. I may build circuits. I may build science projects with my kids. I may modify a bicycle or my truck or some other machine. There will be no direct value of this tinkering to my job. I will tinker because I enjoy understanding how things work. I will merely enjoy the minutiae of building a thing, deconstructing a thing, or modifying a thing.</p>\n<h2 id=\"6-hours\"><a href=\"#6-hours\" class=\"headerlink\" title=\"6 hours\"></a>6 hours</h2><p>If you’ve read this far, then you realize this post is primarily a contact I’m writing to myself. I’m committing to 6 hours per week to improve my body, profession, and mind. I have no goals or resolutions. I will enjoy the steps along the way. I may travel a short distance or a far distance, but I will approach 2017 by merely putting one foot in front of the other.</p>\n"},{"title":"Safe PostgreSQL Migrations","date":"2016-10-25T18:40:59.000Z","_content":"\n\nYou never get the database design correct the first time. When it comes times to change the database, you have two paths:\n\n1. Drop tables and rebuild\n2. Migrate\n\n## Drop tables and rebuild\n\nIf you're early in development, and you are changing the database schema daily, it probably just makes more sense to drop all tables and then recreate.\n\nMy current strategy is to keep a few SQL scripts in the source code repository in `sql/` folder.\n\n### `1-create-tables.sql`\n\n1. Drop all tables\n2. Create tables\n3. Add columns to tables\n4. Add constraints to columns except for foreign keys\n\n### `2-insert-records.sql`\n\n1. Add realistic data the provide a useful starting point for any developer working with this data.\n2. Add additional realistic data that helps QA regression test tricky scenarios.\n\n### `3-foreign-keys.sql`\n\n1. Add all foreign-key constraints. You have to add these constraints after you've inserted records.\n\n## Migrate\n\nDatabase migrations assume you are altering objects that already exist and that you shouldn't be destroying data.\n\n1. Snapshot your database\n2. Create incrementing SQL scripts\n3. Run migrations\n\n### Snapshot your database\n\nAlways snapshot your database before starting a migration unless you want to cry.\n\n### Create incrementing SQL scripts\n\nAdd a SQL script to make each incremental change to the database that you need. Never go backward and modify existing SQL scripts. Also it's possible that a human modified something directly in a dev database. This is great to keep the team moving, but it's going to wreak havoc when you have to promote these changes through your delivery pipeline. For extra safety, wrap every kind of creation statement in a conditional check to only execute if the object doesn't exist. Here are some ways to do this for various types of objects in PostgreSQL:\n\n### Add columns\n\nPostgreSQL 9.6 allows:\n\n```\nATLER TABLE <table_name> ADD COLUMN IF NOT EXISTS <column_name> <column_type>;\n```\n\nIf you are using an older version of PostgreSQL, then you can use:\n\n```\nDO $$\n    BEGIN\n        BEGIN\n            ALTER TABLE <table_name> ADD COLUMN <column_name> <column_type>;\n        EXCEPTION\n            WHEN duplicate_column THEN RAISE NOTICE 'column <column_name> already exists in <table_name> table.';\n        END;\n    END;\n$$;\n```\n\n### Run migrations\n\nThere is probably a go-to migrations library for any framework you are using. When in doubt, go with [Flyway](https://flywaydb.org/).\n","source":"_posts/Safe-PostgreSQL-Migrations.md","raw":"---\ntitle: Safe PostgreSQL Migrations\ndate: 2016-10-25 14:40:59\ntags:\n---\n\n\nYou never get the database design correct the first time. When it comes times to change the database, you have two paths:\n\n1. Drop tables and rebuild\n2. Migrate\n\n## Drop tables and rebuild\n\nIf you're early in development, and you are changing the database schema daily, it probably just makes more sense to drop all tables and then recreate.\n\nMy current strategy is to keep a few SQL scripts in the source code repository in `sql/` folder.\n\n### `1-create-tables.sql`\n\n1. Drop all tables\n2. Create tables\n3. Add columns to tables\n4. Add constraints to columns except for foreign keys\n\n### `2-insert-records.sql`\n\n1. Add realistic data the provide a useful starting point for any developer working with this data.\n2. Add additional realistic data that helps QA regression test tricky scenarios.\n\n### `3-foreign-keys.sql`\n\n1. Add all foreign-key constraints. You have to add these constraints after you've inserted records.\n\n## Migrate\n\nDatabase migrations assume you are altering objects that already exist and that you shouldn't be destroying data.\n\n1. Snapshot your database\n2. Create incrementing SQL scripts\n3. Run migrations\n\n### Snapshot your database\n\nAlways snapshot your database before starting a migration unless you want to cry.\n\n### Create incrementing SQL scripts\n\nAdd a SQL script to make each incremental change to the database that you need. Never go backward and modify existing SQL scripts. Also it's possible that a human modified something directly in a dev database. This is great to keep the team moving, but it's going to wreak havoc when you have to promote these changes through your delivery pipeline. For extra safety, wrap every kind of creation statement in a conditional check to only execute if the object doesn't exist. Here are some ways to do this for various types of objects in PostgreSQL:\n\n### Add columns\n\nPostgreSQL 9.6 allows:\n\n```\nATLER TABLE <table_name> ADD COLUMN IF NOT EXISTS <column_name> <column_type>;\n```\n\nIf you are using an older version of PostgreSQL, then you can use:\n\n```\nDO $$\n    BEGIN\n        BEGIN\n            ALTER TABLE <table_name> ADD COLUMN <column_name> <column_type>;\n        EXCEPTION\n            WHEN duplicate_column THEN RAISE NOTICE 'column <column_name> already exists in <table_name> table.';\n        END;\n    END;\n$$;\n```\n\n### Run migrations\n\nThere is probably a go-to migrations library for any framework you are using. When in doubt, go with [Flyway](https://flywaydb.org/).\n","slug":"Safe-PostgreSQL-Migrations","published":1,"updated":"2016-11-25T19:44:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy3jfq5s00090zrrvf7nvpfr","content":"<p>You never get the database design correct the first time. When it comes times to change the database, you have two paths:</p>\n<ol>\n<li>Drop tables and rebuild</li>\n<li>Migrate</li>\n</ol>\n<h2 id=\"Drop-tables-and-rebuild\"><a href=\"#Drop-tables-and-rebuild\" class=\"headerlink\" title=\"Drop tables and rebuild\"></a>Drop tables and rebuild</h2><p>If you’re early in development, and you are changing the database schema daily, it probably just makes more sense to drop all tables and then recreate.</p>\n<p>My current strategy is to keep a few SQL scripts in the source code repository in <code>sql/</code> folder.</p>\n<h3 id=\"1-create-tables-sql\"><a href=\"#1-create-tables-sql\" class=\"headerlink\" title=\"1-create-tables.sql\"></a><code>1-create-tables.sql</code></h3><ol>\n<li>Drop all tables</li>\n<li>Create tables</li>\n<li>Add columns to tables</li>\n<li>Add constraints to columns except for foreign keys</li>\n</ol>\n<h3 id=\"2-insert-records-sql\"><a href=\"#2-insert-records-sql\" class=\"headerlink\" title=\"2-insert-records.sql\"></a><code>2-insert-records.sql</code></h3><ol>\n<li>Add realistic data the provide a useful starting point for any developer working with this data.</li>\n<li>Add additional realistic data that helps QA regression test tricky scenarios.</li>\n</ol>\n<h3 id=\"3-foreign-keys-sql\"><a href=\"#3-foreign-keys-sql\" class=\"headerlink\" title=\"3-foreign-keys.sql\"></a><code>3-foreign-keys.sql</code></h3><ol>\n<li>Add all foreign-key constraints. You have to add these constraints after you’ve inserted records.</li>\n</ol>\n<h2 id=\"Migrate\"><a href=\"#Migrate\" class=\"headerlink\" title=\"Migrate\"></a>Migrate</h2><p>Database migrations assume you are altering objects that already exist and that you shouldn’t be destroying data.</p>\n<ol>\n<li>Snapshot your database</li>\n<li>Create incrementing SQL scripts</li>\n<li>Run migrations</li>\n</ol>\n<h3 id=\"Snapshot-your-database\"><a href=\"#Snapshot-your-database\" class=\"headerlink\" title=\"Snapshot your database\"></a>Snapshot your database</h3><p>Always snapshot your database before starting a migration unless you want to cry.</p>\n<h3 id=\"Create-incrementing-SQL-scripts\"><a href=\"#Create-incrementing-SQL-scripts\" class=\"headerlink\" title=\"Create incrementing SQL scripts\"></a>Create incrementing SQL scripts</h3><p>Add a SQL script to make each incremental change to the database that you need. Never go backward and modify existing SQL scripts. Also it’s possible that a human modified something directly in a dev database. This is great to keep the team moving, but it’s going to wreak havoc when you have to promote these changes through your delivery pipeline. For extra safety, wrap every kind of creation statement in a conditional check to only execute if the object doesn’t exist. Here are some ways to do this for various types of objects in PostgreSQL:</p>\n<h3 id=\"Add-columns\"><a href=\"#Add-columns\" class=\"headerlink\" title=\"Add columns\"></a>Add columns</h3><p>PostgreSQL 9.6 allows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ATLER TABLE &lt;table_name&gt; ADD COLUMN IF NOT EXISTS &lt;column_name&gt; &lt;column_type&gt;;</div></pre></td></tr></table></figure>\n<p>If you are using an older version of PostgreSQL, then you can use:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DO $$</div><div class=\"line\">    BEGIN</div><div class=\"line\">        BEGIN</div><div class=\"line\">            ALTER TABLE &lt;table_name&gt; ADD COLUMN &lt;column_name&gt; &lt;column_type&gt;;</div><div class=\"line\">        EXCEPTION</div><div class=\"line\">            WHEN duplicate_column THEN RAISE NOTICE &apos;column &lt;column_name&gt; already exists in &lt;table_name&gt; table.&apos;;</div><div class=\"line\">        END;</div><div class=\"line\">    END;</div><div class=\"line\">$$;</div></pre></td></tr></table></figure>\n<h3 id=\"Run-migrations\"><a href=\"#Run-migrations\" class=\"headerlink\" title=\"Run migrations\"></a>Run migrations</h3><p>There is probably a go-to migrations library for any framework you are using. When in doubt, go with <a href=\"https://flywaydb.org/\" target=\"_blank\" rel=\"external\">Flyway</a>.</p>\n","excerpt":"","more":"<p>You never get the database design correct the first time. When it comes times to change the database, you have two paths:</p>\n<ol>\n<li>Drop tables and rebuild</li>\n<li>Migrate</li>\n</ol>\n<h2 id=\"Drop-tables-and-rebuild\"><a href=\"#Drop-tables-and-rebuild\" class=\"headerlink\" title=\"Drop tables and rebuild\"></a>Drop tables and rebuild</h2><p>If you’re early in development, and you are changing the database schema daily, it probably just makes more sense to drop all tables and then recreate.</p>\n<p>My current strategy is to keep a few SQL scripts in the source code repository in <code>sql/</code> folder.</p>\n<h3 id=\"1-create-tables-sql\"><a href=\"#1-create-tables-sql\" class=\"headerlink\" title=\"1-create-tables.sql\"></a><code>1-create-tables.sql</code></h3><ol>\n<li>Drop all tables</li>\n<li>Create tables</li>\n<li>Add columns to tables</li>\n<li>Add constraints to columns except for foreign keys</li>\n</ol>\n<h3 id=\"2-insert-records-sql\"><a href=\"#2-insert-records-sql\" class=\"headerlink\" title=\"2-insert-records.sql\"></a><code>2-insert-records.sql</code></h3><ol>\n<li>Add realistic data the provide a useful starting point for any developer working with this data.</li>\n<li>Add additional realistic data that helps QA regression test tricky scenarios.</li>\n</ol>\n<h3 id=\"3-foreign-keys-sql\"><a href=\"#3-foreign-keys-sql\" class=\"headerlink\" title=\"3-foreign-keys.sql\"></a><code>3-foreign-keys.sql</code></h3><ol>\n<li>Add all foreign-key constraints. You have to add these constraints after you’ve inserted records.</li>\n</ol>\n<h2 id=\"Migrate\"><a href=\"#Migrate\" class=\"headerlink\" title=\"Migrate\"></a>Migrate</h2><p>Database migrations assume you are altering objects that already exist and that you shouldn’t be destroying data.</p>\n<ol>\n<li>Snapshot your database</li>\n<li>Create incrementing SQL scripts</li>\n<li>Run migrations</li>\n</ol>\n<h3 id=\"Snapshot-your-database\"><a href=\"#Snapshot-your-database\" class=\"headerlink\" title=\"Snapshot your database\"></a>Snapshot your database</h3><p>Always snapshot your database before starting a migration unless you want to cry.</p>\n<h3 id=\"Create-incrementing-SQL-scripts\"><a href=\"#Create-incrementing-SQL-scripts\" class=\"headerlink\" title=\"Create incrementing SQL scripts\"></a>Create incrementing SQL scripts</h3><p>Add a SQL script to make each incremental change to the database that you need. Never go backward and modify existing SQL scripts. Also it’s possible that a human modified something directly in a dev database. This is great to keep the team moving, but it’s going to wreak havoc when you have to promote these changes through your delivery pipeline. For extra safety, wrap every kind of creation statement in a conditional check to only execute if the object doesn’t exist. Here are some ways to do this for various types of objects in PostgreSQL:</p>\n<h3 id=\"Add-columns\"><a href=\"#Add-columns\" class=\"headerlink\" title=\"Add columns\"></a>Add columns</h3><p>PostgreSQL 9.6 allows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ATLER TABLE &lt;table_name&gt; ADD COLUMN IF NOT EXISTS &lt;column_name&gt; &lt;column_type&gt;;</div></pre></td></tr></table></figure>\n<p>If you are using an older version of PostgreSQL, then you can use:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DO $$</div><div class=\"line\">    BEGIN</div><div class=\"line\">        BEGIN</div><div class=\"line\">            ALTER TABLE &lt;table_name&gt; ADD COLUMN &lt;column_name&gt; &lt;column_type&gt;;</div><div class=\"line\">        EXCEPTION</div><div class=\"line\">            WHEN duplicate_column THEN RAISE NOTICE &apos;column &lt;column_name&gt; already exists in &lt;table_name&gt; table.&apos;;</div><div class=\"line\">        END;</div><div class=\"line\">    END;</div><div class=\"line\">$$;</div></pre></td></tr></table></figure>\n<h3 id=\"Run-migrations\"><a href=\"#Run-migrations\" class=\"headerlink\" title=\"Run migrations\"></a>Run migrations</h3><p>There is probably a go-to migrations library for any framework you are using. When in doubt, go with <a href=\"https://flywaydb.org/\">Flyway</a>.</p>\n"},{"title":"Using Lucidchart for Database Design","date":"2017-01-13T20:00:56.000Z","_content":"\n## tl;dr\n\nThis screencast will give you a quick introduction to database design. We will use Lucidchart as a tool to design a database schema for a set of poker cards.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6M3hhRl9yUE1VdEE/view)\n\n## Transcript\n\n1. Create an account and login to [Lucidchart](lucidchart.com)\n2. Explore an example entity relationship diagram\n  1. Show \"manage fields\" menu\n  2. Export to SQL\n3. Describe a card set\n  1. card set is a set of cards of course but what does that mean for the data model\n  2. card\n  3. card_set\n  4. card_set_card\n4. Design Card table\n  1. Show queen of hearts image\n  2. Create a new ERD object with 3 columns\n  3. Manage fields\n  4. Fields are “name”, “type”, “image”\n  5. We use “type” instead of “suit”. We could use same generalized model for Uno or other cards games as well as flashcards for studying. Discuss the compromise of DSLs/jargon vs generalizing/premature-optimization.\n  6. Types are text, text, text\n  7. [Refer to Postgres docs](https://www.postgresql.org/docs/9.5/static/datatype.html_) for data types\n  8. None of these columns are unique, so get rid of keys\n  9. Add an “id” column of type “serial” and “pk”\n4. Design CardSet table\n  1. Describe attributes of a card set\n  2. Create a new ERD object\n  3. Fields are “id” serial and “name” text\n5. Design CardSetCard table\n  1. Describe intersection table for having cards reused in many sets\n  2. Create a new ERD object\n  3. “id” serial , “card_id” integer, “card_set_id” integer\n  4. FK to relate to other tables\n  5. “id” does not need to be a key since we won't lookup with this column. Still needs to be unique. We'll add this constraint later.\n  6. Use bigint 8-bit since we won't increment. Serial is 4-bit unsigned.\n5. Draw key constraints\n  1. Vertical align the three tables\n  2. Left-align text\n  3. Set same width\n  4. Turn on table coloring\n  5. Draw relationship from PK to FK\n  6. Change to one-to-one relationships\n6. Export to SQL\n  1. Choose PostgreSQL\n7. Validate SQL\n  1. Use SQLFiddle\n  2. Choose PostgreSQL\n  3. Build schema\n  4. Save as “1-create-tables.sql”\n\n## Next post in this series\n\n[Getting Started with PostgreSQL on Heroku](/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/)\n","source":"_posts/Using-Lucidchart-for-Database-Design.md","raw":"---\ntitle: Using Lucidchart for Database Design\ndate: 2017-01-13 15:00:56\ntags:\n---\n\n## tl;dr\n\nThis screencast will give you a quick introduction to database design. We will use Lucidchart as a tool to design a database schema for a set of poker cards.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6M3hhRl9yUE1VdEE/view)\n\n## Transcript\n\n1. Create an account and login to [Lucidchart](lucidchart.com)\n2. Explore an example entity relationship diagram\n  1. Show \"manage fields\" menu\n  2. Export to SQL\n3. Describe a card set\n  1. card set is a set of cards of course but what does that mean for the data model\n  2. card\n  3. card_set\n  4. card_set_card\n4. Design Card table\n  1. Show queen of hearts image\n  2. Create a new ERD object with 3 columns\n  3. Manage fields\n  4. Fields are “name”, “type”, “image”\n  5. We use “type” instead of “suit”. We could use same generalized model for Uno or other cards games as well as flashcards for studying. Discuss the compromise of DSLs/jargon vs generalizing/premature-optimization.\n  6. Types are text, text, text\n  7. [Refer to Postgres docs](https://www.postgresql.org/docs/9.5/static/datatype.html_) for data types\n  8. None of these columns are unique, so get rid of keys\n  9. Add an “id” column of type “serial” and “pk”\n4. Design CardSet table\n  1. Describe attributes of a card set\n  2. Create a new ERD object\n  3. Fields are “id” serial and “name” text\n5. Design CardSetCard table\n  1. Describe intersection table for having cards reused in many sets\n  2. Create a new ERD object\n  3. “id” serial , “card_id” integer, “card_set_id” integer\n  4. FK to relate to other tables\n  5. “id” does not need to be a key since we won't lookup with this column. Still needs to be unique. We'll add this constraint later.\n  6. Use bigint 8-bit since we won't increment. Serial is 4-bit unsigned.\n5. Draw key constraints\n  1. Vertical align the three tables\n  2. Left-align text\n  3. Set same width\n  4. Turn on table coloring\n  5. Draw relationship from PK to FK\n  6. Change to one-to-one relationships\n6. Export to SQL\n  1. Choose PostgreSQL\n7. Validate SQL\n  1. Use SQLFiddle\n  2. Choose PostgreSQL\n  3. Build schema\n  4. Save as “1-create-tables.sql”\n\n## Next post in this series\n\n[Getting Started with PostgreSQL on Heroku](/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/)\n","slug":"Using-Lucidchart-for-Database-Design","published":1,"updated":"2017-01-18T23:19:02.000Z","_id":"ciy3jfq5v000a0zrrzpfrp3zp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>This screencast will give you a quick introduction to database design. We will use Lucidchart as a tool to design a database schema for a set of poker cards.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6M3hhRl9yUE1VdEE/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create an account and login to <a href=\"lucidchart.com\">Lucidchart</a></li>\n<li>Explore an example entity relationship diagram<ol>\n<li>Show “manage fields” menu</li>\n<li>Export to SQL</li>\n</ol>\n</li>\n<li>Describe a card set<ol>\n<li>card set is a set of cards of course but what does that mean for the data model</li>\n<li>card</li>\n<li>card_set</li>\n<li>card_set_card</li>\n</ol>\n</li>\n<li>Design Card table<ol>\n<li>Show queen of hearts image</li>\n<li>Create a new ERD object with 3 columns</li>\n<li>Manage fields</li>\n<li>Fields are “name”, “type”, “image”</li>\n<li>We use “type” instead of “suit”. We could use same generalized model for Uno or other cards games as well as flashcards for studying. Discuss the compromise of DSLs/jargon vs generalizing/premature-optimization.</li>\n<li>Types are text, text, text</li>\n<li><a href=\"https://www.postgresql.org/docs/9.5/static/datatype.html_\" target=\"_blank\" rel=\"external\">Refer to Postgres docs</a> for data types</li>\n<li>None of these columns are unique, so get rid of keys</li>\n<li>Add an “id” column of type “serial” and “pk”</li>\n</ol>\n</li>\n<li>Design CardSet table<ol>\n<li>Describe attributes of a card set</li>\n<li>Create a new ERD object</li>\n<li>Fields are “id” serial and “name” text</li>\n</ol>\n</li>\n<li>Design CardSetCard table<ol>\n<li>Describe intersection table for having cards reused in many sets</li>\n<li>Create a new ERD object</li>\n<li>“id” serial , “card_id” integer, “card_set_id” integer</li>\n<li>FK to relate to other tables</li>\n<li>“id” does not need to be a key since we won’t lookup with this column. Still needs to be unique. We’ll add this constraint later.</li>\n<li>Use bigint 8-bit since we won’t increment. Serial is 4-bit unsigned.</li>\n</ol>\n</li>\n<li>Draw key constraints<ol>\n<li>Vertical align the three tables</li>\n<li>Left-align text</li>\n<li>Set same width</li>\n<li>Turn on table coloring</li>\n<li>Draw relationship from PK to FK</li>\n<li>Change to one-to-one relationships</li>\n</ol>\n</li>\n<li>Export to SQL<ol>\n<li>Choose PostgreSQL</li>\n</ol>\n</li>\n<li>Validate SQL<ol>\n<li>Use SQLFiddle</li>\n<li>Choose PostgreSQL</li>\n<li>Build schema</li>\n<li>Save as “1-create-tables.sql”</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/\">Getting Started with PostgreSQL on Heroku</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>This screencast will give you a quick introduction to database design. We will use Lucidchart as a tool to design a database schema for a set of poker cards.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6M3hhRl9yUE1VdEE/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Create an account and login to <a href=\"lucidchart.com\">Lucidchart</a></li>\n<li>Explore an example entity relationship diagram<ol>\n<li>Show “manage fields” menu</li>\n<li>Export to SQL</li>\n</ol>\n</li>\n<li>Describe a card set<ol>\n<li>card set is a set of cards of course but what does that mean for the data model</li>\n<li>card</li>\n<li>card_set</li>\n<li>card_set_card</li>\n</ol>\n</li>\n<li>Design Card table<ol>\n<li>Show queen of hearts image</li>\n<li>Create a new ERD object with 3 columns</li>\n<li>Manage fields</li>\n<li>Fields are “name”, “type”, “image”</li>\n<li>We use “type” instead of “suit”. We could use same generalized model for Uno or other cards games as well as flashcards for studying. Discuss the compromise of DSLs/jargon vs generalizing/premature-optimization.</li>\n<li>Types are text, text, text</li>\n<li><a href=\"https://www.postgresql.org/docs/9.5/static/datatype.html_\">Refer to Postgres docs</a> for data types</li>\n<li>None of these columns are unique, so get rid of keys</li>\n<li>Add an “id” column of type “serial” and “pk”</li>\n</ol>\n</li>\n<li>Design CardSet table<ol>\n<li>Describe attributes of a card set</li>\n<li>Create a new ERD object</li>\n<li>Fields are “id” serial and “name” text</li>\n</ol>\n</li>\n<li>Design CardSetCard table<ol>\n<li>Describe intersection table for having cards reused in many sets</li>\n<li>Create a new ERD object</li>\n<li>“id” serial , “card_id” integer, “card_set_id” integer</li>\n<li>FK to relate to other tables</li>\n<li>“id” does not need to be a key since we won’t lookup with this column. Still needs to be unique. We’ll add this constraint later.</li>\n<li>Use bigint 8-bit since we won’t increment. Serial is 4-bit unsigned.</li>\n</ol>\n</li>\n<li>Draw key constraints<ol>\n<li>Vertical align the three tables</li>\n<li>Left-align text</li>\n<li>Set same width</li>\n<li>Turn on table coloring</li>\n<li>Draw relationship from PK to FK</li>\n<li>Change to one-to-one relationships</li>\n</ol>\n</li>\n<li>Export to SQL<ol>\n<li>Choose PostgreSQL</li>\n</ol>\n</li>\n<li>Validate SQL<ol>\n<li>Use SQLFiddle</li>\n<li>Choose PostgreSQL</li>\n<li>Build schema</li>\n<li>Save as “1-create-tables.sql”</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Getting-Started-with-PostgreSQL-on-Heroku/\">Getting Started with PostgreSQL on Heroku</a></p>\n"},{"title":"init","date":"2016-10-19T02:20:00.000Z","_content":"\nInitial static HTML migration to Hexo underway.\n","source":"_posts/init.md","raw":"---\ntitle: init\ndate: 2016-10-18 22:20:00\ntags:\n---\n\nInitial static HTML migration to Hexo underway.\n","slug":"init","published":1,"updated":"2016-10-19T02:20:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy3jfq5x000b0zrrqe46cf70","content":"<p>Initial static HTML migration to Hexo underway.</p>\n","excerpt":"","more":"<p>Initial static HTML migration to Hexo underway.</p>\n"},{"title":"Bootstrapping the Database","date":"2017-01-18T22:00:04.000Z","_content":"\n## tl;dr\n\nCreating SQL scripts allows you to quickly create new databases and restore the core data necessary for your application to function.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6MGx3Q3E3NWpBY0U/view)\n\n## Transcript\n\n1. Add `drop table if exists \"card\" cascade;` statements\n2. Create 3-add-constraints.sql\n3. Move the FK stuff\n4. Rewrite the insert file to remove IDs\n5. Everything should be lowercase\n6. Rewrite FK stuff like ALTER TABLE card_set_card ADD FOREIGN KEY (card_id) REFERENCES card(id) ON DELETE CASCADE;\n7. Run all scripts again until everything passes with no issues\n8. Capture a backup in the future but assume all necessary data is in your inserts script\n\n## Next post in this series\n\n[Generating a RESTful API with Restify](/2017/01/13/Generating-a-RESTful-API-with-Restify/)\n","source":"_posts/Bootstrapping-the-Database.md","raw":"---\ntitle: Bootstrapping the Database\ndate: 2017-01-18 17:00:04\ntags:\n---\n\n## tl;dr\n\nCreating SQL scripts allows you to quickly create new databases and restore the core data necessary for your application to function.\n\n[![Video](video.jpg)](https://drive.google.com/file/d/0ByuFVgkS5FT6MGx3Q3E3NWpBY0U/view)\n\n## Transcript\n\n1. Add `drop table if exists \"card\" cascade;` statements\n2. Create 3-add-constraints.sql\n3. Move the FK stuff\n4. Rewrite the insert file to remove IDs\n5. Everything should be lowercase\n6. Rewrite FK stuff like ALTER TABLE card_set_card ADD FOREIGN KEY (card_id) REFERENCES card(id) ON DELETE CASCADE;\n7. Run all scripts again until everything passes with no issues\n8. Capture a backup in the future but assume all necessary data is in your inserts script\n\n## Next post in this series\n\n[Generating a RESTful API with Restify](/2017/01/13/Generating-a-RESTful-API-with-Restify/)\n","slug":"Bootstrapping-the-Database","published":1,"updated":"2017-01-18T23:28:40.000Z","_id":"ciy3k538v00008frraln9sdrr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Creating SQL scripts allows you to quickly create new databases and restore the core data necessary for your application to function.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6MGx3Q3E3NWpBY0U/view\" target=\"_blank\" rel=\"external\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Add <code>drop table if exists &quot;card&quot; cascade;</code> statements</li>\n<li>Create 3-add-constraints.sql</li>\n<li>Move the FK stuff</li>\n<li>Rewrite the insert file to remove IDs</li>\n<li>Everything should be lowercase</li>\n<li>Rewrite FK stuff like ALTER TABLE card_set_card ADD FOREIGN KEY (card_id) REFERENCES card(id) ON DELETE CASCADE;</li>\n<li>Run all scripts again until everything passes with no issues</li>\n<li>Capture a backup in the future but assume all necessary data is in your inserts script</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Generating-a-RESTful-API-with-Restify/\">Generating a RESTful API with Restify</a></p>\n","excerpt":"","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Creating SQL scripts allows you to quickly create new databases and restore the core data necessary for your application to function.</p>\n<p><a href=\"https://drive.google.com/file/d/0ByuFVgkS5FT6MGx3Q3E3NWpBY0U/view\"><img src=\"video.jpg\" alt=\"Video\"></a></p>\n<h2 id=\"Transcript\"><a href=\"#Transcript\" class=\"headerlink\" title=\"Transcript\"></a>Transcript</h2><ol>\n<li>Add <code>drop table if exists &quot;card&quot; cascade;</code> statements</li>\n<li>Create 3-add-constraints.sql</li>\n<li>Move the FK stuff</li>\n<li>Rewrite the insert file to remove IDs</li>\n<li>Everything should be lowercase</li>\n<li>Rewrite FK stuff like ALTER TABLE card_set_card ADD FOREIGN KEY (card_id) REFERENCES card(id) ON DELETE CASCADE;</li>\n<li>Run all scripts again until everything passes with no issues</li>\n<li>Capture a backup in the future but assume all necessary data is in your inserts script</li>\n</ol>\n<h2 id=\"Next-post-in-this-series\"><a href=\"#Next-post-in-this-series\" class=\"headerlink\" title=\"Next post in this series\"></a>Next post in this series</h2><p><a href=\"/2017/01/13/Generating-a-RESTful-API-with-Restify/\">Generating a RESTful API with Restify</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/A-Walking-Skeleton-for-Prototyping-and-Elaboration/video.jpg","slug":"video.jpg","post":"ciy3jfq5000000zrr2ko0etsm","modified":0,"renderable":0},{"_id":"source/_posts/Using-Lucidchart-for-Database-Design/video.jpg","slug":"video.jpg","post":"ciy3jfq5v000a0zrrzpfrp3zp","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-PostgreSQL-on-Heroku/video.jpg","slug":"video.jpg","post":"ciy3jfq5k00060zrr6me9g9xm","modified":0,"renderable":0},{"_id":"source/_posts/Creating-the-Database/video.jpg","slug":"video.jpg","post":"ciy3jfq5c00030zrrtbtheoy1","modified":0,"renderable":0},{"_id":"source/_posts/Bootstrapping-the-Database/video.jpg","slug":"video.jpg","post":"ciy3k538v00008frraln9sdrr","modified":0,"renderable":0},{"_id":"source/_posts/Generating-a-RESTful-API-with-Restify/video.jpg","slug":"video.jpg","post":"ciy3jfq5g00050zrrbqroh9y1","modified":0,"renderable":0},{"_id":"source/_posts/Deploying-the-API/video.jpg","slug":"video.jpg","post":"ciy3jfq5e00040zrr5ot4ew4v","modified":0,"renderable":0},{"_id":"source/_posts/Configuring-a-Delivery-Pipeline/video.jpg","slug":"video.jpg","post":"ciy3jfq5b00020zrr2atxfgkc","modified":0,"renderable":0},{"_id":"source/_posts/Organizing-the-Project-Folder/video.jpg","slug":"video.jpg","post":"ciy3jfq5m00070zrr0vev57tk","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}